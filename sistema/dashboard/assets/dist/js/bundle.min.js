/* dashboard.js */
class DashboardManager{constructor(){this.dashboardContainer=document.querySelector('.dashboard-container');this.statsCards=document.querySelectorAll('.stats-card');this.chartsContainer=document.querySelector('.charts-container');this.filtersContainer=document.querySelector('.filters-container');this.searchInput=document.querySelector('#globalSearch');this.refreshBtn=document.querySelector('#refreshDashboard');this.settingsBtn=document.querySelector('#dashboardSettings');this.isRefreshing=false;this.autoRefreshInterval=null;this.autoRefreshEnabled=false;this.refreshIntervalTime=30000;this.lastDataUpdate=null;this.cachedData=new Map();this.activeFilters=new Map();this.searchTimeout=null;this.preferences=this.loadPreferences();this.shortcuts=new Map([ ['r',()=> this.refreshDashboard()],['f',()=> this.focusSearch()],['s',()=> this.toggleSettings()],['1',()=> this.focusCard(0)],['2',()=> this.focusCard(1)],['3',()=> this.focusCard(2)],['4',()=> this.focusCard(3)],['Escape',()=> this.clearFilters()] ]);this.draggedCard=null;this.dropZones=[];this.init()}async init(){try{this.setupEventListeners();this.setupKeyboardShortcuts();this.setupDragAndDrop();this.initializeSearch();this.initializeFilters();this.applyUserPreferences();this.showNotification('Dashboard inicializado(modo manual)','info',2000)}catch(error){this.showNotification('Erro ao inicializar dashboard:'+error.message,'error');console.error('Dashboard initialization error:',error)}}setupEventListeners(){if(this.refreshBtn){this.refreshBtn.addEventListener('click',()=> this.refreshDashboard())}if(this.settingsBtn){this.settingsBtn.addEventListener('click',()=> this.toggleSettings())}if(this.searchInput){this.searchInput.addEventListener('input',(e)=> this.handleSearch(e.target.value));this.searchInput.addEventListener('keydown',(e)=>{if(e.key==='Enter'){this.executeSearch(e.target.value)}})}this.statsCards.forEach((card,index)=>{card.addEventListener('click',()=> this.handleCardClick(card,index));card.addEventListener('dblclick',()=> this.handleCardDoubleClick(card,index));card.addEventListener('contextmenu',(e)=>{e.preventDefault();this.showCardContextMenu(e,card,index)})});document.addEventListener('click',(e)=>{if(!e.target.closest('.context-menu')){this.hideContextMenu()}})}setupKeyboardShortcuts(){document.addEventListener('keydown',(e)=>{if(e.target.tagName==='INPUT' || e.target.tagName==='TEXTAREA'){if(e.key==='Escape'){e.target.blur();this.shortcuts.get('Escape')()}return}if(e.ctrlKey || e.metaKey){switch(e.key){case 'r':e.preventDefault();this.refreshDashboard();break;case 'f':e.preventDefault();this.focusSearch();break}return}if(this.shortcuts.has(e.key)){e.preventDefault();this.shortcuts.get(e.key)()}})}setupDragAndDrop(){this.statsCards.forEach((card,index)=>{card.draggable=true;card.setAttribute('data-card-index',index);card.addEventListener('dragstart',(e)=>{this.draggedCard={element:card,index};card.classList.add('dragging');e.dataTransfer.effectAllowed='move';e.dataTransfer.setData('text/plain',index)});card.addEventListener('dragend',()=>{card.classList.remove('dragging');this.clearDropZones();this.draggedCard=null});card.addEventListener('dragover',(e)=>{e.preventDefault();e.dataTransfer.dropEffect='move';card.classList.add('drop-target')});card.addEventListener('dragleave',()=>{card.classList.remove('drop-target')});card.addEventListener('drop',(e)=>{e.preventDefault();card.classList.remove('drop-target');if(this.draggedCard && this.draggedCard.element !==card){this.swapCards(this.draggedCard.index,index)}})})}initializeSearch(){if(this.searchInput){this.searchInput.setAttribute('autocomplete','off');this.createSearchSuggestions()}}initializeFilters(){const filterButtons=document.querySelectorAll('.filter-btn');filterButtons.forEach(btn=>{btn.addEventListener('click',()=>{this.toggleFilter(btn.dataset.filter,btn.dataset.value)})})}async refreshDashboard(showFeedback=true){if(this.isRefreshing)return;this.isRefreshing=true;if(showFeedback){this.showRefreshingState()}try{const startTime=Date.now();const dataPromises=[ this.fetchStatsData(),this.fetchChartsData(),this.fetchRecentActivity(),this.fetchSystemStatus()];const [statsData,chartsData,activityData,statusData]=await Promise.all(dataPromises);await Promise.all([ this.updateStatsCards(statsData),this.updateCharts(chartsData),this.updateRecentActivity(activityData),this.updateSystemStatus(statusData)]);this.cachedData.set('stats',{data:statsData,timestamp:Date.now()});this.cachedData.set('charts',{data:chartsData,timestamp:Date.now()});this.cachedData.set('activity',{data:activityData,timestamp:Date.now()});this.cachedData.set('status',{data:statusData,timestamp:Date.now()});this.lastDataUpdate=Date.now();const loadTime=Date.now()-startTime;if(showFeedback){this.showNotification(`Dashboard atualizado em ${loadTime}ms`,'success',2000)}this.dispatchDataUpdateEvent(statsData)}catch(error){this.showNotification('Erro ao atualizar dashboard:'+error.message,'error');console.error('Dashboard refresh error:',error)}finally{this.isRefreshing=false;this.hideRefreshingState()}}async fetchStatsData(){const response=await fetch('/sistema/dashboard/api/dashboard/stats.php',{method:'GET',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'}});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}return await response.json()}async fetchChartsData(){const response=await fetch('/sistema/dashboard/api/dashboard/charts.php?type=all',{method:'GET',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'}});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}return await response.json()}async fetchRecentActivity(){const response=await fetch('/sistema/dashboard/api/dashboard/activity.php',{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}return await response.json()}async fetchSystemStatus(){const response=await fetch('/sistema/dashboard/api/dashboard/system-status.php',{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}return await response.json()}async updateStatsCards(data){if(!data.success || !data.stats){throw new Error('Dados de estatísticas inválidos')}const stats=data.stats;const animations=[];this.statsCards.forEach((card,index)=>{const cardType=card.dataset.cardType;if(stats[cardType]){const animation=this.updateStatsCard(card,stats[cardType]);animations.push(animation)}});await Promise.all(animations)}async updateStatsCard(cardElement,data){return new Promise(resolve=>{const valueElement=cardElement.querySelector('.card-value');const trendElement=cardElement.querySelector('.card-trend');const lastUpdatedElement=cardElement.querySelector('.last-updated');if(valueElement){this.animateNumber(valueElement,data.current || 0,1000).then(resolve)}else{resolve()}if(trendElement && data.trend){trendElement.textContent=data.trend.text || '';trendElement.className=`card-trend ${data.trend.direction || 'neutral'}`}if(lastUpdatedElement){lastUpdatedElement.textContent=this.formatTimestamp(Date.now())}this.updateCardStatus(cardElement,data.status || 'normal')})}animateNumber(element,targetValue,duration=1000){return new Promise(resolve=>{const startValue=parseFloat(element.textContent.replace(/[^\d.-]/g,''))|| 0;const difference=targetValue-startValue;const startTime=Date.now();const animate=()=>{const elapsed=Date.now()-startTime;const progress=Math.min(elapsed/duration,1);const easeOut=1-Math.pow(1-progress,3);const currentValue=startValue+(difference*easeOut);element.textContent=this.formatNumber(currentValue);if(progress < 1){requestAnimationFrame(animate)}else{element.textContent=this.formatNumber(targetValue);resolve()}};requestAnimationFrame(animate)})}async updateCharts(data){if(!data.success || !data.charts)return;const charts=data.charts;if(window.Chart){Object.keys(charts).forEach(chartId=>{this.updateChart(chartId,charts[chartId])})}}updateChart(chartId,chartData){const chartElement=document.getElementById(chartId);if(!chartElement)return;console.log(`Updating chart ${chartId}:`,chartData)}async updateRecentActivity(data){if(!data.success || !data.activities)return;const activityContainer=document.querySelector('#recent-activity');if(!activityContainer)return;const activitiesHTML=data.activities.map(activity=> ` <div class="activity-item ${activity.type}"> <div class="activity-icon"> ${this.getActivityIcon(activity.type)}</div> <div class="activity-content"> <div class="activity-title">${activity.title}</div> <div class="activity-time">${this.formatTimestamp(activity.timestamp)}</div> </div> <div class="activity-status ${activity.status}"> ${activity.status.toUpperCase()}</div> </div> `).join('');activityContainer.innerHTML=activitiesHTML}async updateSystemStatus(data){if(!data.success || !data.status)return;const statusElement=document.querySelector('#system-status');if(!statusElement)return;statusElement.className=`system-status ${data.status.level}`;statusElement.textContent=data.status.message;this.updateHealthIndicators(data.status.health ||{})}updateHealthIndicators(health){const indicators={'db-health':health.database || 'unknown','api-health':health.api || 'unknown','storage-health':health.storage || 'unknown'};Object.keys(indicators).forEach(id=>{const indicator=document.getElementById(id);if(indicator){indicator.className=`health-indicator ${indicators[id]}`}})}handleSearch(query){clearTimeout(this.searchTimeout);this.searchTimeout=setTimeout(()=>{this.executeSearch(query)},300)}async executeSearch(query){if(!query.trim()){this.clearSearchResults();return}try{const response=await fetch('/sistema/dashboard/api/dashboard/search.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:query.trim()})});if(!response.ok){throw new Error('Erro na busca')}const results=await response.json();this.displaySearchResults(results)}catch(error){this.showNotification('Erro na busca:'+error.message,'error')}}displaySearchResults(results){console.log('Search results:',results)}clearSearchResults(){const resultsContainer=document.querySelector('#search-results');if(resultsContainer){resultsContainer.innerHTML=''}}createSearchSuggestions(){const suggestionsList=document.createElement('div');suggestionsList.className='search-suggestions';suggestionsList.style.display='none';if(this.searchInput && this.searchInput.parentNode){this.searchInput.parentNode.appendChild(suggestionsList)}}toggleFilter(filterType,filterValue){if(this.activeFilters.has(filterType)){this.activeFilters.delete(filterType)}else{this.activeFilters.set(filterType,filterValue)}this.applyFilters();this.updateFilterButtons()}applyFilters(){if(this.activeFilters.size===0){this.showAllCards();return}this.statsCards.forEach(card=>{const shouldShow=this.cardMatchesFilters(card);card.style.display=shouldShow ? '':'none'})}cardMatchesFilters(card){for(const [filterType,filterValue] of this.activeFilters){if(!this.cardMatchesFilter(card,filterType,filterValue)){return false}}return true}cardMatchesFilter(card,filterType,filterValue){return true}updateFilterButtons(){const filterButtons=document.querySelectorAll('.filter-btn');filterButtons.forEach(btn=>{const isActive=this.activeFilters.has(btn.dataset.filter);btn.classList.toggle('active',isActive)})}clearFilters(){this.activeFilters.clear();this.applyFilters();this.updateFilterButtons();this.showNotification('Filtros removidos','info',1500)}showAllCards(){this.statsCards.forEach(card=>{card.style.display=''})}startAutoRefresh(){if(!this.autoRefreshEnabled)return;this.stopAutoRefresh();this.autoRefreshInterval=setInterval(()=>{this.refreshDashboard(false)},this.refreshIntervalTime)}stopAutoRefresh(){if(this.autoRefreshInterval){clearInterval(this.autoRefreshInterval);this.autoRefreshInterval=null}}pauseAutoRefresh(){this.stopAutoRefresh()}toggleAutoRefresh(){this.autoRefreshEnabled=!this.autoRefreshEnabled;if(this.autoRefreshEnabled){this.startAutoRefresh();this.showNotification('Auto-refresh ativado','success',2000)}else{this.stopAutoRefresh();this.showNotification('Auto-refresh desativado','warning',2000)}this.savePreferences()}handleCardClick(card,index){this.setActiveCard(card,index)}handleCardDoubleClick(card,index){this.expandCard(card,index)}setActiveCard(card,index){this.statsCards.forEach(c=> c.classList.remove('active'));card.classList.add('active')}expandCard(card,index){this.createCardModal(card,index)}createCardModal(card,index){const modal=document.createElement('div');modal.className='card-modal-overlay';modal.innerHTML=` <div class="card-modal"> <div class="card-modal-header"> <h3>${card.querySelector('.card-title')?.textContent || 'Detalhes'}</h3> <button class="modal-close">&times;</button> </div> <div class="card-modal-content"> <p>Detalhes expandidos do card ${index+1}</p> </div> </div> `;modal.querySelector('.modal-close').addEventListener('click',()=>{document.body.removeChild(modal)});modal.addEventListener('click',(e)=>{if(e.target===modal){document.body.removeChild(modal)}});document.body.appendChild(modal)}showCardContextMenu(event,card,index){this.hideContextMenu();const contextMenu=document.createElement('div');contextMenu.className='context-menu';contextMenu.innerHTML=` <div class="context-menu-item" data-action="refresh"> <span>🔄</span> Atualizar Card </div> <div class="context-menu-item" data-action="expand"> <span>🔍</span> Ver Detalhes </div> <div class="context-menu-item" data-action="hide"> <span>👁️</span> Ocultar Card </div> <div class="context-menu-separator"></div> <div class="context-menu-item" data-action="settings"> <span>⚙️</span> Configurações </div> `;contextMenu.style.position='absolute';contextMenu.style.left=`${event.pageX}px`;contextMenu.style.top=`${event.pageY}px`;contextMenu.style.zIndex='9999';contextMenu.addEventListener('click',(e)=>{const action=e.target.closest('.context-menu-item')?.dataset.action;if(action){this.handleContextMenuAction(action,card,index);this.hideContextMenu()}});document.body.appendChild(contextMenu)}hideContextMenu(){const existing=document.querySelector('.context-menu');if(existing){document.body.removeChild(existing)}}handleContextMenuAction(action,card,index){switch(action){case 'refresh':this.refreshCard(card,index);break;case 'expand':this.expandCard(card,index);break;case 'hide':this.hideCard(card,index);break;case 'settings':this.showCardSettings(card,index);break}}async refreshCard(card,index){card.classList.add('refreshing');try{const cardType=card.dataset.cardType;const response=await fetch(`/sistema/dashboard/api/dashboard/stats.php?type=${cardType}`);const data=await response.json();if(data.success){await this.updateStatsCard(card,data.data);this.showNotification('Card atualizado','success',1500)}else{throw new Error(data.error || 'Erro ao atualizar card')}}catch(error){this.showNotification('Erro ao atualizar card:'+error.message,'error')}finally{card.classList.remove('refreshing')}}hideCard(card,index){card.style.display='none';this.showNotification('Card ocultado','info',1500)}showCardSettings(card,index){console.log('Card settings for:',card,index)}swapCards(fromIndex,toIndex){const cards=Array.from(this.statsCards);const fromCard=cards[fromIndex];const toCard=cards[toIndex];if(fromCard && toCard && fromCard !==toCard){const fromParent=fromCard.parentNode;const fromNext=fromCard.nextSibling;toCard.parentNode.insertBefore(fromCard,toCard);fromParent.insertBefore(toCard,fromNext);this.showNotification('Cards reordenados','success',1500);this.saveCardOrder()}}saveCardOrder(){const order=Array.from(this.statsCards).map(card=> card.dataset.cardType);this.preferences.cardOrder=order;this.savePreferences()}clearDropZones(){this.statsCards.forEach(card=>{card.classList.remove('drop-target')})}focusSearch(){if(this.searchInput){this.searchInput.focus();this.searchInput.select()}}focusCard(index){if(this.statsCards[index]){this.setActiveCard(this.statsCards[index],index);this.statsCards[index].scrollIntoView({behavior:'smooth',block:'center'})}}toggleSettings(){const settingsPanel=document.querySelector('#dashboard-settings-panel');if(settingsPanel){const isVisible=settingsPanel.style.display !=='none';settingsPanel.style.display=isVisible ? 'none':'block'}else{this.createSettingsPanel()}}createSettingsPanel(){const panel=document.createElement('div');panel.id='dashboard-settings-panel';panel.className='settings-panel';panel.innerHTML=` <div class="settings-header"> <h3>Configurações do Dashboard</h3> <button class="settings-close">&times;</button> </div> <div class="settings-content"> <div class="setting-group"> <label> <input type="checkbox" id="auto-refresh-toggle" ${this.autoRefreshEnabled ? 'checked':''}> Auto-refresh ativado </label> </div> <div class="setting-group"> <label> Intervalo de refresh(segundos):<input type="range" id="refresh-interval" min="10" max="300" value="${this.refreshIntervalTime/1000}"> <span id="refresh-interval-value">${this.refreshIntervalTime/1000}</span> </label> </div> <div class="setting-group"> <button id="reset-layout">Restaurar Layout Padrão</button> </div> <div class="setting-group"> <button id="export-data">Exportar Dados</button> </div> </div> `;panel.querySelector('.settings-close').addEventListener('click',()=>{document.body.removeChild(panel)});panel.querySelector('#auto-refresh-toggle').addEventListener('change',(e)=>{this.autoRefreshEnabled=e.target.checked;if(this.autoRefreshEnabled){this.startAutoRefresh()}else{this.stopAutoRefresh()}this.savePreferences()});const intervalSlider=panel.querySelector('#refresh-interval');const intervalValue=panel.querySelector('#refresh-interval-value');intervalSlider.addEventListener('input',(e)=>{const seconds=parseInt(e.target.value);intervalValue.textContent=seconds;this.refreshIntervalTime=seconds*1000;if(this.autoRefreshEnabled){this.startAutoRefresh()}this.savePreferences()});panel.querySelector('#reset-layout').addEventListener('click',()=>{this.resetLayout()});panel.querySelector('#export-data').addEventListener('click',()=>{this.exportDashboardData()});document.body.appendChild(panel)}resetLayout(){this.preferences=this.getDefaultPreferences();this.savePreferences();this.applyUserPreferences();this.showNotification('Layout restaurado','success',2000)}async exportDashboardData(){try{const data={stats:this.cachedData.get('stats')?.data,charts:this.cachedData.get('charts')?.data,activity:this.cachedData.get('activity')?.data,exportTime:new Date().toISOString()};const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`dashboard-data-${Date.now()}.json`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);this.showNotification('Dados exportados','success',2000)}catch(error){this.showNotification('Erro ao exportar:'+error.message,'error')}}loadPreferences(){const defaultPrefs=this.getDefaultPreferences();const saved=localStorage.getItem('dashboard-preferences');if(saved){try{return{...defaultPrefs,...JSON.parse(saved)}}catch(error){console.warn('Erro ao carregar preferências:',error)}}return defaultPrefs}savePreferences(){localStorage.setItem('dashboard-preferences',JSON.stringify(this.preferences))}getDefaultPreferences(){return{autoRefreshEnabled:true,refreshIntervalTime:30000,cardOrder:[],hiddenCards:[],theme:'light'}}applyUserPreferences(){this.autoRefreshEnabled=this.preferences.autoRefreshEnabled;this.refreshIntervalTime=this.preferences.refreshIntervalTime;if(this.preferences.cardOrder && this.preferences.cardOrder.length > 0){this.applyCardOrder(this.preferences.cardOrder)}if(this.preferences.hiddenCards && this.preferences.hiddenCards.length > 0){this.applyHiddenCards(this.preferences.hiddenCards)}}applyCardOrder(order){console.log('Applying card order:',order)}applyHiddenCards(hiddenCards){hiddenCards.forEach(cardType=>{const card=document.querySelector(`[data-card-type="${cardType}"]`);if(card){card.style.display='none'}})}showRefreshingState(){if(this.refreshBtn){this.refreshBtn.classList.add('refreshing');this.refreshBtn.disabled=true}this.statsCards.forEach(card=>{card.classList.add('updating')})}hideRefreshingState(){if(this.refreshBtn){this.refreshBtn.classList.remove('refreshing');this.refreshBtn.disabled=false}this.statsCards.forEach(card=>{card.classList.remove('updating')})}updateCardStatus(card,status){card.classList.remove('normal','warning','error','success');card.classList.add(status)}dispatchDataUpdateEvent(data){const event=new CustomEvent('dashboardDataUpdate',{detail:{data,timestamp:Date.now()}});document.dispatchEvent(event)}getActivityIcon(type){const icons={upload:'📤',process:'⚙️',error:'❌',success:'✅',warning:'⚠️',info:'ℹ️'};return icons[type] || '📋'}formatNumber(num){if(num >=1000000){return(num/1000000).toFixed(1)+'M'}else if(num >=1000){return(num/1000).toFixed(1)+'K'}return num.toLocaleString()}formatTimestamp(timestamp){const date=new Date(timestamp);const now=new Date();const diff=now.getTime()-date.getTime();if(diff < 60000){return 'agora mesmo'}else if(diff < 3600000){const minutes=Math.floor(diff/60000);return `${minutes}min atrás`}else if(diff < 86400000){const hours=Math.floor(diff/3600000);return `${hours}h atrás`}else{return date.toLocaleDateString('pt-BR')}}showNotification(message,type='info',duration=5000){if(window.uploadManager && window.uploadManager.showFeedback){window.uploadManager.showFeedback(message,type,duration)}else{this.createNotification(message,type,duration)}}createNotification(message,type,duration){const notification=document.createElement('div');notification.className=`notification ${type}`;notification.textContent=message;notification.style.cssText=` position:fixed;top:20px;right:20px;padding:12px 20px;background:var(--${type}-color,#333);color:white;border-radius:4px;z-index:10000;animation:slideInFromRight 0.3s ease;`;document.body.appendChild(notification);setTimeout(()=>{notification.style.animation='slideOutToRight 0.3s ease';setTimeout(()=>{if(notification.parentNode){notification.parentNode.removeChild(notification)}},300)},duration)}destroy(){this.stopAutoRefresh();document.removeEventListener('keydown',this.keydownHandler);window.removeEventListener('focus',this.focusHandler);window.removeEventListener('blur',this.blurHandler);document.removeEventListener('visibilitychange',this.visibilityHandler);if(this.searchTimeout){clearTimeout(this.searchTimeout)}}}const dashboardStyles=document.createElement('style');dashboardStyles.textContent=` @keyframes slideInFromRight{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}@keyframes slideOutToRight{from{transform:translateX(0);opacity:1}to{transform:translateX(100%);opacity:0}}.stats-card.dragging{opacity:0.5;transform:rotate(5deg);z-index:1000}.stats-card.drop-target{border:2px dashed #007bff;transform:scale(1.05)}.stats-card.updating{position:relative;pointer-events:none}.stats-card.updating::after{content:'';position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(255,255,255,0.8);display:flex;align-items:center;justify-content:center;font-size:24px;animation:pulse 1s infinite}@keyframes pulse{0%{opacity:0.6}50%{opacity:1}100%{opacity:0.6}}.context-menu{background:white;border:1px solid #ddd;border-radius:4px;box-shadow:0 4px 12px rgba(0,0,0,0.15);overflow:hidden}.context-menu-item{padding:8px 16px;cursor:pointer;display:flex;align-items:center;gap:8px}.context-menu-item:hover{background:#f5f5f5}.context-menu-separator{height:1px;background:#eee;margin:4px 0}.settings-panel{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;border:1px solid #ddd;border-radius:8px;box-shadow:0 8px 24px rgba(0,0,0,0.2);z-index:10000;min-width:400px}.settings-header{padding:16px 20px;border-bottom:1px solid #eee;display:flex;justify-content:between;align-items:center}.settings-close{background:none;border:none;font-size:24px;cursor:pointer;margin-left:auto}.settings-content{padding:20px}.setting-group{margin-bottom:20px}.setting-group label{display:block;margin-bottom:8px}.card-modal-overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.5);z-index:10000;display:flex;align-items:center;justify-content:center}.card-modal{background:white;border-radius:8px;max-width:600px;max-height:80vh;overflow:auto}.card-modal-header{padding:20px;border-bottom:1px solid #eee;display:flex;justify-content:between;align-items:center}.card-modal-content{padding:20px}`;document.head.appendChild(dashboardStyles);(function(){'use strict';if(window.dashboardManager){return}let dashboardManager;document.addEventListener('DOMContentLoaded',function(){dashboardManager=new DashboardManager();window.dashboardManager=dashboardManager;window.refreshDashboardManually=function(){console.log('🎯 Refresh manual do dashboard iniciado...');return dashboardManager.refreshDashboard(true)};console.log('📊 Dashboard Manager:MODO MANUAL ATIVO');console.log('🔧 Use window.refreshDashboardManually()ou botões de refresh')});window.DashboardManager=DashboardManager})();
/* charts.js */
class ExpertzyChartsSystem{constructor(){this.charts=new Map();this.colors={primary:'#FF002D',secondary:'#091A30',success:'#28a745',warning:'#ffc107',info:'#007bff',light:'#f8f9fa',dark:'#343a40',gray:'#6c757d'};this.gradients={};this.isInitialized=false;this.init()}init(){if(this.isInitialized)return;this.setupChartDefaults();this.createColorPalettes();this.setupResizeObservers();this.isInitialized=true;console.log('✅ Sistema de Gráficos Expertzy inicializado(modo manual)')}setupChartDefaults(){Chart.defaults.font.family='var(--expertzy-font-family)';Chart.defaults.font.size=12;Chart.defaults.color=this.colors.gray;Chart.defaults.scale.grid.color='rgba(0,0,0,0.05)';Chart.defaults.plugins.legend.display=true;Chart.defaults.plugins.legend.position='bottom';Chart.defaults.plugins.tooltip.backgroundColor='rgba(9,26,48,0.95)';Chart.defaults.plugins.tooltip.titleColor='#ffffff';Chart.defaults.plugins.tooltip.bodyColor='#ffffff';Chart.defaults.plugins.tooltip.cornerRadius=8;Chart.defaults.animation.duration=1000;Chart.defaults.animation.easing='easeInOutQuart';Chart.defaults.responsive=true;Chart.defaults.maintainAspectRatio=false}createColorPalettes(){const canvas=document.createElement('canvas');const ctx=canvas.getContext('2d');this.gradients.primary=ctx.createLinearGradient(0,0,0,400);this.gradients.primary.addColorStop(0,'rgba(255,0,45,0.8)');this.gradients.primary.addColorStop(1,'rgba(255,0,45,0.1)');this.gradients.secondary=ctx.createLinearGradient(0,0,0,400);this.gradients.secondary.addColorStop(0,'rgba(9,26,48,0.8)');this.gradients.secondary.addColorStop(1,'rgba(9,26,48,0.1)');this.dataColors=[ this.colors.primary,this.colors.secondary,this.colors.success,this.colors.warning,this.colors.info,'#e83e8c','#6f42c1','#fd7e14','#20c997','#6610f2' ];this.pieColors=[ '#FF002D','#091A30','#28a745','#ffc107','#007bff','#e83e8c','#6f42c1','#fd7e14','#20c997','#6610f2','#17a2b8','#dc3545','#28a745','#ffc107','#6c757d','#343a40' ]}initWebSocket(){console.log('📊 Sistema de polling DESABILITADO-Controle manual ativo')}refreshCharts(){console.log('🔄 Atualização manual de gráficos solicitada');this.loadChartData(true)}manualLoadCharts(){console.log('🎯 Carregamento manual iniciado pelo usuário');return this.loadChartData(true)}setupResizeObservers(){if(window.ResizeObserver){const resizeObserver=new ResizeObserver((entries)=>{entries.forEach((entry)=>{const chartContainer=entry.target;const chartInstance=this.charts.get(chartContainer.id);if(chartInstance){chartInstance.resize()}})});document.querySelectorAll('[data-chart]').forEach((container)=>{resizeObserver.observe(container)})}}async loadChartData(manualTrigger=false){if(!manualTrigger){console.log('🔄 Carregamento automático BLOQUEADO-Use controle manual');this.showEmptyStates();return}try{const response=await fetch('/sistema/dashboard/api/dashboard/charts.php?type=all');const data=await response.json();if(data.success){this.renderAllCharts(data.charts)}}catch(error){console.error('Erro ao carregar dados dos gráficos:',error);this.showEmptyStates()}}renderAllCharts(chartsData){if(chartsData.temporal){this.createTemporalChart(chartsData.temporal)}if(chartsData.taxes){this.createTaxesChart(chartsData.taxes)}if(chartsData.expenses){this.createExpensesChart(chartsData.expenses)}if(chartsData.currencies){this.createCurrenciesChart(chartsData.currencies)}if(chartsData.states){this.createStatesHeatmap(chartsData.states)}if(chartsData.correlation){this.createCorrelationChart(chartsData.correlation)}}createTemporalChart(data){const ctx=document.getElementById('temporalChart');if(!ctx)return;this.showChartSkeleton(ctx.parentElement);const chart=new Chart(ctx,{type:'line',data:{labels:data.months,datasets:[{label:'DIs Processadas',data:data.dis_count,borderColor:this.colors.primary,backgroundColor:this.gradients.primary,borderWidth:3,fill:true,tension:0.4,pointBackgroundColor:this.colors.primary,pointBorderColor:'#ffffff',pointBorderWidth:2,pointRadius:6,pointHoverRadius:8},{label:'Valor CIF(milhões)',data:data.cif_values,borderColor:this.colors.secondary,backgroundColor:this.gradients.secondary,borderWidth:3,fill:true,tension:0.4,pointBackgroundColor:this.colors.secondary,pointBorderColor:'#ffffff',pointBorderWidth:2,pointRadius:6,pointHoverRadius:8,yAxisID:'y1'}]},options:{responsive:true,interaction:{mode:'index',intersect:false,},scales:{x:{display:true,title:{display:true,text:'Período(últimos 12 meses)',font:{weight:'bold'}}},y:{type:'linear',display:true,position:'left',title:{display:true,text:'Quantidade de DIs',font:{weight:'bold'}}},y1:{type:'linear',display:true,position:'right',title:{display:true,text:'Valor CIF(R$ milhões)',font:{weight:'bold'}},grid:{drawOnChartArea:false,},}},plugins:{title:{display:true,text:'Evolução de Importações-Últimos 12 Meses',font:{size:16,weight:'bold'},color:this.colors.dark},legend:{position:'bottom',labels:{usePointStyle:true,padding:20}},tooltip:{callbacks:{afterLabel:function(context){if(context.datasetIndex===1){return `Crescimento:${data.growth[context.dataIndex]}%`}return ''}}}},animation:{onComplete:()=>{this.hideChartSkeleton(ctx.parentElement)}},onClick:(event,elements)=>{if(elements.length > 0){const index=elements[0].index;this.showTemporalDrillDown(data.months[index],data)}}}});this.charts.set('temporalChart',chart);this.addChartControls(ctx.parentElement,'temporal')}createTaxesChart(data){const ctx=document.getElementById('taxesChart');if(!ctx)return;this.showChartSkeleton(ctx.parentElement);const chart=new Chart(ctx,{type:'bar',data:{labels:['II','IPI','PIS','COFINS','ICMS'],datasets:[{label:'Impostos Arrecadados(R$ milhões)',data:[ data.ii_total,data.ipi_total,data.pis_total,data.cofins_total,data.icms_total ],backgroundColor:[ this.colors.primary,this.colors.secondary,this.colors.success,this.colors.warning,this.colors.info ],borderColor:[ this.colors.primary,this.colors.secondary,this.colors.success,this.colors.warning,this.colors.info ],borderWidth:2,borderRadius:8,borderSkipped:false}]},options:{responsive:true,scales:{x:{title:{display:true,text:'Tipos de Impostos',font:{weight:'bold'}}},y:{title:{display:true,text:'Valor Arrecadado(R$ milhões)',font:{weight:'bold'}},beginAtZero:true}},plugins:{title:{display:true,text:'Impostos Arrecadados por Tipo',font:{size:16,weight:'bold'},color:this.colors.dark},legend:{display:false},tooltip:{callbacks:{afterLabel:function(context){const percentage=data.percentages[context.dataIndex];return `${percentage}% do total`}}}},animation:{onComplete:()=>{this.hideChartSkeleton(ctx.parentElement)}},onClick:(event,elements)=>{if(elements.length > 0){const index=elements[0].index;const taxType=['ii','ipi','pis','cofins','icms'][index];this.showTaxDrillDown(taxType,data)}}}});this.charts.set('taxesChart',chart);this.addChartControls(ctx.parentElement,'taxes')}createExpensesChart(data){const ctx=document.getElementById('expensesChart');if(!ctx)return;this.showChartSkeleton(ctx.parentElement);const chart=new Chart(ctx,{type:'pie',data:{labels:data.categories,datasets:[{data:data.values,backgroundColor:this.pieColors.slice(0,data.categories.length),borderColor:'#ffffff',borderWidth:3,hoverOffset:10}]},options:{responsive:true,plugins:{title:{display:true,text:'Distribuição de Despesas Portuárias',font:{size:16,weight:'bold'},color:this.colors.dark},legend:{position:'right',labels:{usePointStyle:true,padding:15,generateLabels:function(chart){const data=chart.data;const labels=Chart.defaults.plugins.legend.labels.generateLabels(chart);labels.forEach((label,index)=>{const value=data.datasets[0].data[index];const total=data.datasets[0].data.reduce((a,b)=> a+b,0);const percentage=((value/total)*100).toFixed(1);label.text+=`(${percentage}%)`});return labels}}},tooltip:{callbacks:{label:function(context){const value=context.parsed;const total=context.dataset.data.reduce((a,b)=> a+b,0);const percentage=((value/total)*100).toFixed(1);return `${context.label}:R$ ${value.toLocaleString('pt-BR')}(${percentage}%)`}}}},animation:{animateRotate:true,animateScale:true,onComplete:()=>{this.hideChartSkeleton(ctx.parentElement)}},onClick:(event,elements)=>{if(elements.length > 0){const index=elements[0].index;const category=data.categories[index];this.showExpenseDrillDown(category,data)}}}});this.charts.set('expensesChart',chart);this.addChartControls(ctx.parentElement,'expenses')}createCurrenciesChart(data){const ctx=document.getElementById('currenciesChart');if(!ctx)return;this.showChartSkeleton(ctx.parentElement);const chart=new Chart(ctx,{type:'doughnut',data:{labels:data.currencies,datasets:[{data:data.values,backgroundColor:this.dataColors.slice(0,data.currencies.length),borderColor:'#ffffff',borderWidth:3,hoverOffset:15}]},options:{responsive:true,cutout:'60%',plugins:{title:{display:true,text:'Segmentação por Moedas',font:{size:16,weight:'bold'},color:this.colors.dark},legend:{position:'bottom',labels:{usePointStyle:true,padding:20}},tooltip:{callbacks:{label:function(context){const value=context.parsed;const total=context.dataset.data.reduce((a,b)=> a+b,0);const percentage=((value/total)*100).toFixed(1);return `${context.label}:${value.toLocaleString('pt-BR')}DIs(${percentage}%)`}}}},animation:{animateRotate:true,animateScale:true,onComplete:()=>{this.hideChartSkeleton(ctx.parentElement)}}}});this.addDonutCenterText(ctx,data.total_dis,'Total de DIs');this.charts.set('currenciesChart',chart);this.addChartControls(ctx.parentElement,'currencies')}createStatesHeatmap(data){const container=document.getElementById('statesHeatmap');if(!container)return;this.showChartSkeleton(container);const heatmapHTML=` <div class="heatmap-container"> <div class="heatmap-title">Performance por Estado-Benefícios Fiscais</div> <div class="heatmap-grid"> ${data.states.map(state=> ` <div class="heatmap-cell" data-state="${state.uf}" data-value="${state.performance}" style="background-color:${this.getHeatmapColor(state.performance)}"> <div class="state-code">${state.uf}</div> <div class="state-value">${state.performance}%</div> <div class="state-dis">${state.dis_count}DIs</div> </div> `).join('')}</div> <div class="heatmap-legend"> <div class="legend-title">Performance de Benefícios</div> <div class="legend-scale"> <div class="legend-item"> <div class="legend-color" style="background:#ff4757"></div> <span>0-25%</span> </div> <div class="legend-item"> <div class="legend-color" style="background:#ffa502"></div> <span>25-50%</span> </div> <div class="legend-item"> <div class="legend-color" style="background:#ffdd59"></div> <span>50-75%</span> </div> <div class="legend-item"> <div class="legend-color" style="background:#5f27cd"></div> <span>75-100%</span> </div> </div> </div> </div> `;container.innerHTML=heatmapHTML;container.querySelectorAll('.heatmap-cell').forEach(cell=>{cell.addEventListener('click',()=>{const state=cell.dataset.state;this.showStateDrillDown(state,data)})});setTimeout(()=>{this.hideChartSkeleton(container)},1000);this.addChartControls(container,'states')}createCorrelationChart(data){const ctx=document.getElementById('correlationChart');if(!ctx)return;this.showChartSkeleton(ctx.parentElement);const chart=new Chart(ctx,{type:'scatter',data:{datasets:[{label:'DIs Importadas',data:data.scatter_points,backgroundColor:this.colors.primary,borderColor:this.colors.primary,pointRadius:6,pointHoverRadius:8,pointBorderWidth:2,pointBorderColor:'#ffffff'}]},options:{responsive:true,scales:{x:{type:'linear',position:'bottom',title:{display:true,text:'Taxa de Câmbio(R$/USD)',font:{weight:'bold'}}},y:{title:{display:true,text:'Custo Landed(R$ milhões)',font:{weight:'bold'}}}},plugins:{title:{display:true,text:'Correlação:Taxa de Câmbio vs Custo Landed',font:{size:16,weight:'bold'},color:this.colors.dark},legend:{display:false},tooltip:{callbacks:{label:function(context){const point=data.scatter_details[context.dataIndex];return [ `DI:${point.di_number}`,`Câmbio:R$ ${context.parsed.x.toFixed(4)}`,`Custo:R$ ${context.parsed.y.toLocaleString('pt-BR')}`,`Data:${point.date}` ]}}}},animation:{onComplete:()=>{this.hideChartSkeleton(ctx.parentElement)}}}});this.charts.set('correlationChart',chart);this.addChartControls(ctx.parentElement,'correlation')}getHeatmapColor(value){if(value >=75)return '#5f27cd';if(value >=50)return '#ffdd59';if(value >=25)return '#ffa502';return '#ff4757'}addDonutCenterText(ctx,value,label){const chart=Chart.getChart(ctx);const plugin={id:'centerText',afterDraw:function(chart){const ctx=chart.ctx;const centerX=(chart.chartArea.left+chart.chartArea.right)/2;const centerY=(chart.chartArea.top+chart.chartArea.bottom)/2;ctx.save();ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='bold 24px var(--expertzy-font-family)';ctx.fillStyle='#FF002D';ctx.fillText(value.toLocaleString('pt-BR'),centerX,centerY-10);ctx.font='14px var(--expertzy-font-family)';ctx.fillStyle='#6c757d';ctx.fillText(label,centerX,centerY+15);ctx.restore()}};chart.options.plugins=chart.options.plugins ||{};chart.options.plugins.centerText=plugin}showChartSkeleton(container){const skeleton=container.querySelector('.chart-skeleton');if(skeleton){skeleton.style.display='block'}}hideChartSkeleton(container){const skeleton=container.querySelector('.chart-skeleton');if(skeleton){skeleton.style.display='none'}}showEmptyStates(){document.querySelectorAll('[data-chart]').forEach(container=>{const emptyState=container.querySelector('.chart-empty');if(emptyState){emptyState.style.display='flex'}container.setAttribute('data-state','awaiting-manual');const skeleton=container.querySelector('.chart-skeleton');if(skeleton){skeleton.style.display='none'}})}addChartControls(container,chartType){const controlsHTML=` <div class="chart-controls"> <button class="chart-control-btn" data-action="fullscreen" title="Tela cheia"> <svg width="16" height="16" viewBox="0 0 24 24" fill="none"> <path d="M8 3H5C3.89543 3 3 3.89543 3 5V8M21 8V5C21 3.89543 20.1046 3 19 3H16M16 21H19C20.1046 21 21 20.1046 21 19V16M8 21H5C3.89543 21 3 20.1046 3 19V16" stroke="currentColor" stroke-width="2"/> </svg> </button> <button class="chart-control-btn" data-action="export-png" title="Exportar PNG"> <svg width="16" height="16" viewBox="0 0 24 24" fill="none"> <path d="M21 15V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V15M7 10L12 15M12 15L17 10M12 15V3" stroke="currentColor" stroke-width="2"/> </svg> </button> <button class="chart-control-btn" data-action="refresh" title="Atualizar"> <svg width="16" height="16" viewBox="0 0 24 24" fill="none"> <path d="M4 4V9H4.58152M4.58152 9C5.24618 7.35652 6.43937 5.97687 8.01844 5.05653C9.59752 4.13618 11.4737 3.73552 13.3644 3.9062C15.2552 4.07687 17.0321 4.80945 18.4133 6.00005C19.7944 7.19065 20.6988 8.78249 20.9982 10.5" stroke="currentColor" stroke-width="2"/> <path d="M20 20V15H19.4185M19.4185 15C18.7538 16.6435 17.5606 18.0231 15.9816 18.9435C14.4025 19.8638 12.5263 20.2645 10.6356 20.0938C8.74482 19.9231 6.96787 19.1905 5.58668 18C4.20549 16.8094 3.30116 15.2175 3.00183 13.5" stroke="currentColor" stroke-width="2"/> </svg> </button> </div> `;container.insertAdjacentHTML('afterbegin',controlsHTML);container.querySelector('.chart-controls').addEventListener('click',(e)=>{const action=e.target.closest('.chart-control-btn')?.dataset.action;if(action){this.handleChartAction(action,chartType,container)}})}handleChartAction(action,chartType,container){switch(action){case 'fullscreen':this.toggleFullscreen(container);break;case 'export-png':this.exportChart(chartType,'png');break;case 'refresh':this.refreshChart(chartType);break}}toggleFullscreen(container){if(container.requestFullscreen){if(document.fullscreenElement){document.exitFullscreen()}else{container.requestFullscreen()}}}exportChart(chartType,format){const chart=this.charts.get(`${chartType}Chart`);if(!chart)return;const url=chart.toBase64Image('image/png',1.0);const link=document.createElement('a');link.download=`${chartType}-chart-${new Date().toISOString().split('T')[0]}.${format}`;link.href=url;link.click()}async refreshChart(chartType,manualTrigger=false){if(!manualTrigger){console.log(`🚫 Atualização automática de ${chartType}BLOQUEADA-Use controle manual`);return}try{console.log(`🔄 Atualizando gráfico ${chartType}manualmente...`);const response=await fetch(`/sistema/dashboard/api/dashboard/charts.php?type=${chartType}`);const data=await response.json();if(data.success){const chart=this.charts.get(`${chartType}Chart`);if(chart){chart.data=data.chartData.data;chart.update('active')}}}catch(error){console.error(`Erro ao atualizar gráfico ${chartType}:`,error)}}showTemporalDrillDown(month,data){console.log('Drill-down temporal:',month,data)}showTaxDrillDown(taxType,data){console.log('Drill-down impostos:',taxType,data)}showExpenseDrillDown(category,data){console.log('Drill-down despesas:',category,data)}showStateDrillDown(state,data){console.log('Drill-down estado:',state,data)}destroy(){this.charts.forEach(chart=>{chart.destroy()});this.charts.clear();this.isInitialized=false}}(function(){'use strict';if(window.expertzyCharts){return}document.addEventListener('DOMContentLoaded',function(){if(typeof Chart !=='undefined'){window.expertzyCharts=new ExpertzyChartsSystem();window.loadChartsManually=function(){console.log('🎯 Carregamento manual de gráficos iniciado...');return window.expertzyCharts.manualLoadCharts()};console.log('📊 Sistema de Gráficos:MODO MANUAL ATIVO');console.log('🔧 Use window.loadChartsManually()ou botão "Atualizar Todos"')}else{console.error('Chart.js não foi carregado. Verifique se a biblioteca está incluída.')}});window.ExpertzyChartsSystem=ExpertzyChartsSystem;if(typeof module !=='undefined' && module.exports){module.exports=ExpertzyChartsSystem}})();
/* upload.js */
class UploadManager{constructor(){this.uploadZone=document.getElementById('uploadZone');this.fileInput=document.getElementById('fileInput');this.uploadProgress=document.getElementById('uploadProgress');this.progressFill=document.getElementById('progressFill');this.progressText=document.getElementById('progressText');this.progressPercent=document.getElementById('progressPercent');this.fileList=document.getElementById('fileList');this.filesContainer=document.getElementById('filesContainer');this.processFilesBtn=document.getElementById('processFiles');this.clearFilesBtn=document.getElementById('clearFiles');this.feedbackContainer=document.getElementById('feedbackContainer');this.selectedFiles=[];this.uploadQueue=[];this.activeUploads=new Map();this.maxFileSize=10*1024*1024;this.chunkSize=5*1024*1024;this.allowedTypes=['.xml'];this.isProcessing=false;this.maxRetries=3;this.retryDelay=1000;this.duplicateFiles=new Map();this.xmlValidator=null;this.pollingInterval=null;this.wsConnection=null;this.wsReconnectAttempts=0;this.maxWsReconnectAttempts=5;this.init()}async init(){this.setupEventListeners();await this.initializeXmlValidator();this.initializeWebSocket();this.showFeedback('Sistema de upload avançado inicializado','info')}async initializeXmlValidator(){try{if(window.XMLValidator){this.xmlValidator=new window.XMLValidator()}}catch(error){console.warn('XML Validator não disponível:',error.message)}}initializeWebSocket(){this.startStatusPolling()}startStatusPolling(){if(this.pollingInterval)return;this.pollingInterval=setInterval(()=>{if(this.activeUploads.size > 0){this.fetchRealUploadStatus()}},2000)}async fetchRealUploadStatus(){for(const [fileId,upload] of this.activeUploads){if(upload.status==='processing'){try{const response=await fetch(`/sistema/dashboard/api/upload/status.php?id=${fileId}`);if(response.ok){const data=await response.json();if(data.status==='success'){this.handleUploadProgress(fileId,data.progress);if(data.completed){this.handleUploadComplete(fileId,data)}}}}catch(error){console.error(`Erro ao verificar status do upload ${fileId}:`,error)}}}}addActiveUpload(fileId,uploadData){this.activeUploads.set(fileId,{...uploadData,status:'processing',startTime:Date.now()})}removeActiveUpload(fileId){this.activeUploads.delete(fileId)}updateActiveUpload(fileId,updateData){if(this.activeUploads.has(fileId)){const upload=this.activeUploads.get(fileId);this.activeUploads.set(fileId,{...upload,...updateData})}}handleWebSocketMessage(data){switch(data.type){case 'upload_progress':this.updateFileProgress(data.fileId,data.progress);break;case 'upload_complete':this.handleUploadComplete(data.fileId,data.result);break;case 'system_status':this.updateSystemStatus(data.status);break;case 'duplicate_detected':this.handleDuplicateFile(data.filename,data.existingData);break}}handleWebSocketReconnect(){if(this.wsReconnectAttempts < this.maxWsReconnectAttempts){setTimeout(()=>{this.wsReconnectAttempts++;this.initializeWebSocket()},2000*this.wsReconnectAttempts)}}setupEventListeners(){this.uploadZone.addEventListener('dragover',(e)=> this.handleDragOver(e));this.uploadZone.addEventListener('dragleave',(e)=> this.handleDragLeave(e));this.uploadZone.addEventListener('drop',(e)=> this.handleDrop(e));this.uploadZone.addEventListener('click',()=> this.fileInput.click());this.fileInput.addEventListener('change',(e)=> this.handleFileSelect(e));this.processFilesBtn.addEventListener('click',()=> this.processFiles());this.clearFilesBtn.addEventListener('click',()=> this.clearFiles());['dragenter','dragover','dragleave','drop'].forEach(eventName=>{this.uploadZone.addEventListener(eventName,this.preventDefaults);document.body.addEventListener(eventName,this.preventDefaults)})}preventDefaults(e){e.preventDefault();e.stopPropagation()}handleDragOver(e){this.preventDefaults(e);this.uploadZone.classList.add('dragover')}handleDragLeave(e){this.preventDefaults(e);this.uploadZone.classList.remove('dragover')}handleDrop(e){this.preventDefaults(e);this.uploadZone.classList.remove('dragover');const files=Array.from(e.dataTransfer.files);this.addFiles(files)}handleFileSelect(e){const files=Array.from(e.target.files);this.addFiles(files)}async addFiles(files){const validFiles=[];const errors=[];const duplicates=[];this.showFeedback('Validando arquivos...','info',1000);for(const file of files){try{const validation=await this.validateFile(file);if(validation.valid){const duplicate=await this.checkDuplicate(file);if(duplicate.isDuplicate){duplicates.push({file,existing:duplicate.existingFile,reason:duplicate.reason})}else{file.uploadId=this.generateFileId(file);file.status='pending';file.retryCount=0;file.chunks=this.calculateChunks(file);validFiles.push(file)}}else{errors.push(`${file.name}:${validation.error}`)}}catch(error){errors.push(`${file.name}:Erro na validação-${error.message}`)}}if(duplicates.length > 0){const allowDuplicates=await this.handleDuplicateFiles(duplicates);if(allowDuplicates){duplicates.forEach(dup=>{dup.file.uploadId=this.generateFileId(dup.file);dup.file.status='pending';dup.file.retryCount=0;dup.file.chunks=this.calculateChunks(dup.file);dup.file.isDuplicate=true;validFiles.push(dup.file)})}}if(validFiles.length > 0){this.selectedFiles.push(...validFiles);this.renderFileList();this.showFeedback(`${validFiles.length}arquivo(s)validado(s)e adicionado(s)`,'success')}if(errors.length > 0){errors.forEach(error=>{this.showFeedback(error,'error')})}this.fileInput.value=''}async checkDuplicate(file){const inSelection=this.selectedFiles.find(f=> f.name===file.name && f.size===file.size);if(inSelection){return{isDuplicate:true,existingFile:inSelection,reason:'Arquivo já selecionado nesta sessão'}}try{const response=await fetch('api/upload/check-duplicate.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({filename:file.name,size:file.size,lastModified:file.lastModified})});if(response.ok){const result=await response.json();if(result.isDuplicate){return{isDuplicate:true,existingFile:result.existingFile,reason:'DI já processada no sistema'}}}}catch(error){console.warn('Erro ao verificar duplicatas no servidor:',error)}return{isDuplicate:false}}async handleDuplicateFiles(duplicates){return new Promise(resolve=>{const modal=this.createDuplicateModal(duplicates,resolve);document.body.appendChild(modal)})}createDuplicateModal(duplicates,resolve){const modal=document.createElement('div');modal.className='modal-overlay';modal.innerHTML=` <div class="modal-content duplicate-modal"> <h3>Arquivos Duplicados Detectados</h3> <p>Os seguintes arquivos podem ser duplicatas:</p> <div class="duplicate-list"> ${duplicates.map(dup=> ` <div class="duplicate-item"> <strong>${dup.file.name}</strong> <small>${dup.reason}</small> </div> `).join('')}</div> <div class="modal-actions"> <button class="btn btn-secondary" onclick="this.parentElement.parentElement.parentElement.resolve(false)">Cancelar</button> <button class="btn btn-primary" onclick="this.parentElement.parentElement.parentElement.resolve(true)">Processar Mesmo Assim</button> </div> </div> `;modal.resolve=(result)=>{document.body.removeChild(modal);resolve(result)};return modal}generateFileId(file){return `file_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}calculateChunks(file){if(file.size <=this.chunkSize){return 1}return Math.ceil(file.size/this.chunkSize)}async validateFile(file){const extension='.'+file.name.split('.').pop().toLowerCase();if(!this.allowedTypes.includes(extension)){return{valid:false,error:'Apenas arquivos XML são permitidos'}}if(file.size > this.maxFileSize){return{valid:false,error:`Arquivo muito grande(máximo ${this.formatFileSize(this.maxFileSize)})`}}if(file.size===0){return{valid:false,error:'Arquivo está vazio'}}try{const xmlContent=await this.readFileContent(file,10000);const xmlValidation=this.validateXMLStructure(xmlContent);if(!xmlValidation.valid){return xmlValidation}if(this.xmlValidator){const diValidation=await this.xmlValidator.validateDI(xmlContent);if(!diValidation.valid){return diValidation}}}catch(error){return{valid:false,error:`Erro ao validar XML:${error.message}`}}return{valid:true}}readFileContent(file,maxBytes=null){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=(e)=> resolve(e.target.result);reader.onerror=(e)=> reject(new Error('Erro ao ler arquivo'));if(maxBytes && file.size > maxBytes){const blob=file.slice(0,maxBytes);reader.readAsText(blob)}else{reader.readAsText(file)}})}validateXMLStructure(xmlContent){try{const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlContent,'text/xml');const parserError=xmlDoc.querySelector('parsererror');if(parserError){return{valid:false,error:'XML mal formado:'+parserError.textContent}}const isDI=xmlContent.includes('<declaracaoImportacao>')|| xmlContent.includes('<DI>')|| xmlContent.includes('numero_di')|| xmlContent.includes('declaracao_importacao');if(!isDI){return{valid:false,error:'XML não parece ser uma Declaração de Importação brasileira'}}return{valid:true}}catch(error){return{valid:false,error:'Erro ao validar estrutura XML:'+error.message}}}renderFileList(){if(this.selectedFiles.length===0){this.fileList.style.display='none';return}this.fileList.style.display='block';this.filesContainer.innerHTML='';this.selectedFiles.forEach((file,index)=>{const fileElement=this.createFileElement(file,index);this.filesContainer.appendChild(fileElement)});this.processFilesBtn.textContent=`Processar ${this.selectedFiles.length}Arquivo(s)`;this.processFilesBtn.disabled=this.isProcessing}createFileElement(file,index){const fileDiv=document.createElement('div');fileDiv.className='file-item';fileDiv.setAttribute('data-file-id',file.uploadId);const validationIcon=file.isDuplicate ? '<span class="duplicate-badge" title="Arquivo duplicado">DUP</span>':'';const chunkedInfo=file.chunks > 1 ? `<span class="chunked-info" title="Será enviado em ${file.chunks}partes">📦 ${file.chunks}</span>`:'';fileDiv.innerHTML=` <div class="file-info"> <div class="file-icon">XML</div> <div class="file-details"> <h4>${file.name}${validationIcon}</h4> <span> ${this.formatFileSize(file.size)}• ${this.formatDate(file.lastModified)}${chunkedInfo}</span> </div> </div> <div class="file-progress"> <div class="progress-ring"> <div class="progress-circle" data-progress="0"></div> <span class="progress-text">0%</span> </div> </div> <div class="file-status pending">Aguardando</div> <button class="btn-remove" onclick="uploadManager.removeFile(${index})" title="Remover arquivo"> <svg width="16" height="16" viewBox="0 0 24 24" fill="none"> <path d="M6 6L18 18M6 18L18 6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/> </svg> </button> `;return fileDiv}getFileElement(fileId){return this.filesContainer.querySelector(`[data-file-id="${fileId}"]`)}updateFileProgress(fileId,progress){const fileElement=this.getFileElement(fileId);if(!fileElement)return;const progressCircle=fileElement.querySelector('.progress-circle');const progressText=fileElement.querySelector('.progress-text');if(progressCircle && progressText){progressCircle.setAttribute('data-progress',Math.round(progress));progressText.textContent=`${Math.round(progress)}%`;const circumference=2*Math.PI*12;const strokeDasharray=circumference;const strokeDashoffset=circumference-(progress/100)*circumference;progressCircle.style.strokeDasharray=strokeDasharray;progressCircle.style.strokeDashoffset=strokeDashoffset}}handleUploadComplete(fileId,result){const fileElement=this.getFileElement(fileId);if(!fileElement)return;const statusElement=fileElement.querySelector('.file-status');if(result.success){statusElement.textContent='Concluído';statusElement.className='file-status success';this.updateFileProgress(fileId,100)}else{statusElement.textContent='Erro';statusElement.className='file-status error'}}handleDuplicateFile(filename,existingData){this.showFeedback(`DI duplicada detectada:${filename}. Dados existentes:DI ${existingData.numero_di}`,'warning',8000)}updateSystemStatus(status){const statusIndicator=document.querySelector('#system-status');if(statusIndicator){statusIndicator.className=`system-status ${status}`;statusIndicator.textContent=status.toUpperCase()}}removeFile(index){this.selectedFiles.splice(index,1);this.renderFileList();this.showFeedback('Arquivo removido da lista','info')}clearFiles(){this.selectedFiles=[];this.renderFileList();this.hideProgress();this.showFeedback('Lista de arquivos limpa','info')}async processFiles(){if(this.selectedFiles.length===0){this.showFeedback('Nenhum arquivo selecionado para processar','warning');return}if(this.isProcessing){this.showFeedback('Processamento já em andamento','warning');return}this.isProcessing=true;this.processFilesBtn.disabled=true;this.showProgress();try{this.uploadQueue=[...this.selectedFiles];const totalFiles=this.uploadQueue.length;let processedFiles=0;let successCount=0;let errorCount=0;const maxConcurrent=3;const processingPromises=[];while(this.uploadQueue.length > 0 || processingPromises.length > 0){while(this.uploadQueue.length > 0 && processingPromises.length < maxConcurrent){const file=this.uploadQueue.shift();const uploadPromise=this.processFileWithRetry(file,processedFiles,totalFiles).then(result=>{processedFiles++;if(result.success){successCount++}else{errorCount++}return result}).catch(error=>{processedFiles++;errorCount++;return{success:false,error:error.message}});processingPromises.push(uploadPromise)}if(processingPromises.length > 0){const completedIndex=await Promise.race(processingPromises.map((promise,index)=> promise.then(result=>({index,result}))));processingPromises.splice(completedIndex.index,1);const overallProgress=(processedFiles/totalFiles)*100;this.updateProgress(overallProgress,`Processados:${processedFiles}/${totalFiles}| Sucessos:${successCount}| Erros:${errorCount}`)}}if(errorCount===0){this.showFeedback(`Todos os ${successCount}arquivos processados com sucesso!`,'success')}else if(successCount > 0){this.showFeedback(`Processamento concluído:${successCount}sucessos,${errorCount}erros`,'warning')}else{this.showFeedback(`Falha no processamento:${errorCount}erros`,'error')}}catch(error){this.showFeedback(`Erro crítico no processamento:${error.message}`,'error')}finally{this.isProcessing=false;this.processFilesBtn.disabled=false;this.hideProgress();setTimeout(()=>{this.refreshStats()},2000)}}async processFileWithRetry(file,fileIndex,totalFiles){const fileElement=this.getFileElement(file.uploadId);const statusElement=fileElement?.querySelector('.file-status');let lastError=null;for(let attempt=0;attempt <=this.maxRetries;attempt++){try{if(statusElement){const retryText=attempt > 0 ? `(Tentativa ${attempt+1})`:'';statusElement.textContent=`Processando${retryText}`;statusElement.className='file-status processing'}this.updateFileProgress(file.uploadId,0);const result=await this.uploadFileAdvanced(file,fileIndex,totalFiles);if(result.success){if(statusElement){statusElement.textContent='Concluído';statusElement.className='file-status success'}this.updateFileProgress(file.uploadId,100);this.showFeedback(`${file.name}processado com sucesso`,'success',3000);return result}else{throw new Error(result.error || 'Erro desconhecido')}}catch(error){lastError=error;file.retryCount=attempt+1;if(attempt < this.maxRetries){this.showFeedback(`Erro em ${file.name},tentando novamente...(${attempt+1}/${this.maxRetries})`,'warning',2000);await this.sleep(this.retryDelay*Math.pow(2,attempt))}else{if(statusElement){statusElement.textContent=`Erro(${this.maxRetries+1}tentativas)`;statusElement.className='file-status error'}this.showFeedback(`Falha definitiva em ${file.name}:${error.message}`,'error')}}}return{success:false,error:lastError?.message || 'Falha após todas as tentativas',retryCount:file.retryCount}}async uploadFileAdvanced(file,fileIndex,totalFiles){if(file.size > this.chunkSize){return await this.uploadFileChunked(file,fileIndex,totalFiles)}else{return await this.uploadFileSingle(file,fileIndex,totalFiles)}}async uploadFileSingle(file,fileIndex,totalFiles){this.addActiveUpload(file.uploadId,{filename:file.name,size:file.size,progress:0});return new Promise((resolve,reject)=>{const formData=new FormData();formData.append('xml_file',file);formData.append('action','upload_xml');formData.append('file_id',file.uploadId);formData.append('is_duplicate',file.isDuplicate || false);const xhr=new XMLHttpRequest();xhr.upload.onprogress=(e)=>{if(e.lengthComputable){const percent=(e.loaded/e.total)*100;this.updateFileProgress(file.uploadId,percent);this.updateActiveUpload(file.uploadId,{progress:percent})}};xhr.onload=()=>{this.removeActiveUpload(file.uploadId);if(xhr.status===200){try{const response=JSON.parse(xhr.responseText);resolve(response)}catch(e){reject(new Error('Resposta inválida do servidor'))}}else{reject(new Error(`Erro HTTP ${xhr.status}:${xhr.statusText}`))}};xhr.onerror=()=>{this.removeActiveUpload(file.uploadId);reject(new Error('Erro de conexão com o servidor'))};xhr.ontimeout=()=>{this.removeActiveUpload(file.uploadId);reject(new Error('Timeout na requisição(tempo limite excedido)'))};xhr.timeout=120000;xhr.open('POST','api/upload/process.php');xhr.send(formData)})}async uploadFileChunked(file,fileIndex,totalFiles){const totalChunks=Math.ceil(file.size/this.chunkSize);const uploadId=file.uploadId;this.showFeedback(`Iniciando upload em ${totalChunks}partes:${file.name}`,'info',3000);try{const initResponse=await fetch('api/upload/init-chunked.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({filename:file.name,filesize:file.size,total_chunks:totalChunks,upload_id:uploadId})});if(!initResponse.ok){throw new Error('Falha ao inicializar upload em partes')}const{session_id}=await initResponse.json();for(let chunkIndex=0;chunkIndex < totalChunks;chunkIndex++){const start=chunkIndex*this.chunkSize;const end=Math.min(start+this.chunkSize,file.size);const chunk=file.slice(start,end);const chunkFormData=new FormData();chunkFormData.append('chunk',chunk);chunkFormData.append('session_id',session_id);chunkFormData.append('chunk_index',chunkIndex);chunkFormData.append('total_chunks',totalChunks);const chunkResponse=await fetch('api/upload/chunk.php',{method:'POST',body:chunkFormData});if(!chunkResponse.ok){throw new Error(`Falha no upload da parte ${chunkIndex+1}/${totalChunks}`)}const chunkProgress=((chunkIndex+1)/totalChunks)*100;this.updateFileProgress(uploadId,chunkProgress)}const finalizeResponse=await fetch('api/upload/finalize-chunked.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({session_id,filename:file.name,upload_id:uploadId})});if(!finalizeResponse.ok){throw new Error('Falha ao finalizar upload em partes')}return await finalizeResponse.json()}catch(error){try{await fetch('api/upload/cleanup-chunked.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({upload_id:uploadId})})}catch(cleanupError){console.warn('Erro na limpeza do upload falhado:',cleanupError)}throw error}}async uploadFile(file){return this.uploadFileSingle(file,0,1)}showProgress(){this.uploadProgress.style.display='block';this.updateProgress(0,'Iniciando processamento...')}updateProgress(percent,text){this.progressFill.style.width=`${percent}%`;this.progressPercent.textContent=`${Math.round(percent)}%`;this.progressText.textContent=text}hideProgress(){setTimeout(()=>{this.uploadProgress.style.display='none'},1000)}showFeedback(message,type='info',duration=5000){const feedbackDiv=document.createElement('div');feedbackDiv.className=`feedback-message ${type}`;const icons={success:`<svg width="20" height="20" viewBox="0 0 24 24" fill="none"> <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/> </svg>`,error:`<svg width="20" height="20" viewBox="0 0 24 24" fill="none"> <path d="M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/> </svg>`,warning:`<svg width="20" height="20" viewBox="0 0 24 24" fill="none"> <path d="M12 9V13M12 17H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/> </svg>`,info:`<svg width="20" height="20" viewBox="0 0 24 24" fill="none"> <path d="M13 16H12V12H11M12 8H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/> </svg>`};feedbackDiv.innerHTML=` ${icons[type] || icons.info}<span>${message}</span> `;this.feedbackContainer.appendChild(feedbackDiv);setTimeout(()=>{feedbackDiv.style.animation='slideOutRight 0.3s ease';setTimeout(()=>{if(feedbackDiv.parentNode){feedbackDiv.parentNode.removeChild(feedbackDiv)}},300)},duration);feedbackDiv.addEventListener('click',()=>{feedbackDiv.style.animation='slideOutRight 0.3s ease';setTimeout(()=>{if(feedbackDiv.parentNode){feedbackDiv.parentNode.removeChild(feedbackDiv)}},300)})}formatFileSize(bytes){if(bytes===0)return '0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i]}formatDate(timestamp){const date=new Date(timestamp);return date.toLocaleDateString('pt-BR')+' '+date.toLocaleTimeString('pt-BR',{hour:'2-digit',minute:'2-digit'})}sleep(ms){return new Promise(resolve=> setTimeout(resolve,ms))}async refreshStats(){try{const response=await fetch('api/dashboard/stats.php');const data=await response.json();if(data.success){this.updateStatsCards(data.stats);this.showFeedback('Estatísticas atualizadas','success',2000)}}catch(error){this.showFeedback('Erro ao atualizar estatísticas','error')}}updateStatsCards(stats){console.log('Atualizando estatísticas:',stats)}destroy(){if(this.pollingInterval){clearInterval(this.pollingInterval)}this.activeUploads.clear();if(this.wsConnection){this.wsConnection.close()}}}const style=document.createElement('style');style.textContent=` @keyframes slideOutRight{from{transform:translateX(0);opacity:1}to{transform:translateX(100%);opacity:0}}.btn-remove{background:none;border:none;color:#999;cursor:pointer;padding:0.5rem;border-radius:50%;transition:all 0.2s ease}.btn-remove:hover{background:#ff002d;color:white;transform:scale(1.1)}`;document.head.appendChild(style);(function(){'use strict';if(window.uploadManager){return}let uploadManager;document.addEventListener('DOMContentLoaded',function(){uploadManager=new UploadManager();window.uploadManager=uploadManager;setInterval(()=>{if(!uploadManager.isProcessing){uploadManager.refreshStats()}},30000)});window.UploadManager=UploadManager})();
/* manual-control.js */
class ManualControlPanel{constructor(){this.isAutoRefreshEnabled=false;this.refreshInterval=60;this.refreshTimer=null;this.activeOperations=new Set();this.init()}init(){console.log('Inicializando Manual Control Panel...');if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',()=> this.setupEventListeners())}else{this.setupEventListeners()}this.loadSavedSettings()}setupEventListeners(){this.bindButton('btnImportXML',()=> this.handleImportXML());this.bindButton('btnVerifyDatabase',()=> this.handleVerifyDatabase());this.bindButton('btnClearCache',()=> this.handleClearCache());this.bindButton('btnLoadCharts',()=> this.handleLoadCharts());this.bindButton('btnLoadStats',()=> this.handleLoadStats());this.bindButton('btnRefreshAll',()=> this.handleRefreshAll());this.bindButton('btnAdvancedSettings',()=> this.handleAdvancedSettings());const autoRefreshToggle=document.getElementById('autoRefreshToggle');if(autoRefreshToggle){autoRefreshToggle.addEventListener('change',(e)=>{this.toggleAutoRefresh(e.target.checked)})}const refreshInterval=document.getElementById('refreshInterval');if(refreshInterval){refreshInterval.addEventListener('input',(e)=>{this.updateRefreshInterval(parseInt(e.target.value))})}this.setupKeyboardShortcuts();console.log('Event listeners configurados com sucesso')}bindButton(id,handler){const button=document.getElementById(id);if(button){button.addEventListener('click',(e)=>{e.preventDefault();if(!button.disabled && !this.activeOperations.has(id)){handler()}})}}setupKeyboardShortcuts(){document.addEventListener('keydown',(e)=>{if((e.ctrlKey || e.metaKey)&& e.shiftKey){switch(e.key.toLowerCase()){case 'i':e.preventDefault();this.handleImportXML();break;case 'r':e.preventDefault();this.handleRefreshAll();break;case 'v':e.preventDefault();this.handleVerifyDatabase();break;case 'c':e.preventDefault();this.handleLoadCharts();break}}})}async handleImportXML(){console.log('Iniciando importação de XML...');const uploadZone=document.getElementById('uploadZone');const fileInput=document.getElementById('fileInput');if(fileInput){fileInput.click()}else if(uploadZone){uploadZone.click()}else{this.showFeedback('Upload não disponível no momento','warning')}}async handleVerifyDatabase(){console.log('Verificando status do banco de dados...');await this.executeOperation('btnVerifyDatabase','Verificando Banco',async()=>{try{const response=await fetch('/sistema/dashboard/api/database-status.php',{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}const data=await response.json();if(data.success){this.showFeedback('Banco de dados verificado com sucesso','success');this.updateSystemStatus(data.status)}else{this.showFeedback(data.message || 'Erro na verificação do banco','error')}}catch(error){console.error('Erro na verificação:',error);this.showFeedback('Erro ao conectar com o servidor','error')}})}async handleClearCache(){console.log('Limpando cache do sistema...');await this.executeOperation('btnClearCache','Limpando Cache',async()=>{try{localStorage.removeItem('etl_dashboard_cache');localStorage.removeItem('etl_charts_cache');sessionStorage.clear();const response=await fetch('/sistema/dashboard/api/cache-clear.php',{method:'POST',headers:{'Content-Type':'application/json'}});if(response.ok){this.showFeedback('Cache limpo com sucesso','success')}else{this.showFeedback('Cache local limpo(servidor indisponível)','warning')}}catch(error){console.error('Erro ao limpar cache:',error);this.showFeedback('Cache local limpo','info')}})}async handleLoadCharts(){console.log('Carregando gráficos...');await this.executeOperation('btnLoadCharts','Carregando Gráficos',async()=>{try{if(typeof window.expertzyCharts !=='undefined'){await window.expertzyCharts.loadChartData();this.showFeedback('Gráficos carregados com sucesso','success')}else{const response=await fetch('/sistema/dashboard/api/dashboard/charts.php');if(response.ok){const data=await response.json();this.showFeedback('Dados de gráficos carregados','success');document.dispatchEvent(new CustomEvent('chartsDataUpdated',{detail:data}))}else{throw new Error('Falha ao carregar dados dos gráficos')}}}catch(error){console.error('Erro ao carregar gráficos:',error);this.showFeedback('Erro ao carregar gráficos','error')}})}async handleLoadStats(){console.log('Carregando estatísticas...');await this.executeOperation('btnLoadStats','Carregando Estatísticas',async()=>{try{const response=await fetch('/sistema/dashboard/api/stats.php');if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}const data=await response.json();if(data.success){this.updateStatCards(data.stats);this.showFeedback('Estatísticas atualizadas','success')}else{throw new Error(data.message || 'Erro ao carregar estatísticas')}}catch(error){console.error('Erro ao carregar estatísticas:',error);this.showFeedback('Erro ao carregar estatísticas','error')}})}async handleRefreshAll(){console.log('Atualizando todo o sistema...');await this.executeOperation('btnRefreshAll','Atualizando Sistema',async()=>{try{const operations=[ this.verifyDatabaseStatus(),this.loadStats(),this.loadCharts()];const results=await Promise.allSettled(operations);let successCount=0;let errorCount=0;results.forEach((result,index)=>{if(result.status==='fulfilled'){successCount++}else{errorCount++;console.error(`Operação ${index}falhou:`,result.reason)}});if(errorCount===0){this.showFeedback('Sistema atualizado completamente','success')}else if(successCount > 0){this.showFeedback(`Sistema parcialmente atualizado(${successCount}/${results.length})`,'warning')}else{this.showFeedback('Falha na atualização do sistema','error')}}catch(error){console.error('Erro na atualização geral:',error);this.showFeedback('Erro na atualização do sistema','error')}})}handleAdvancedSettings(){console.log('Abrindo configurações avançadas...');const modal=document.querySelector('[data-modal="advanced-settings"]');if(modal){modal.style.display='block'}else{this.showAdvancedSettingsPanel()}}showAdvancedSettingsPanel(){const panel=document.createElement('div');panel.className='advanced-settings-panel';panel.innerHTML=` <div class="settings-overlay"> <div class="settings-modal"> <div class="settings-header"> <h3>Configurações Avançadas</h3> <button class="close-settings" aria-label="Fechar">&times;</button> </div> <div class="settings-content"> <div class="setting-group"> <label> <input type="checkbox" id="enableDebugMode"> Modo Debug </label> <small>Exibe logs detalhados no console</small> </div> <div class="setting-group"> <label> <input type="checkbox" id="enableNotifications"> Notificações </label> <small>Receber notificações do sistema</small> </div> <div class="setting-group"> <label>Cache Duration(minutes):</label> <input type="number" id="cacheDuration" min="1" max="60" value="15"> </div> </div> <div class="settings-actions"> <button class="btn btn-primary save-settings">Salvar</button> <button class="btn btn-secondary cancel-settings">Cancelar</button> </div> </div> </div> `;document.body.appendChild(panel);panel.querySelector('.close-settings').addEventListener('click',()=>{panel.remove()});panel.querySelector('.cancel-settings').addEventListener('click',()=>{panel.remove()});panel.querySelector('.save-settings').addEventListener('click',()=>{this.saveAdvancedSettings(panel);panel.remove()});panel.querySelector('.settings-overlay').addEventListener('click',(e)=>{if(e.target===e.currentTarget){panel.remove()}})}saveAdvancedSettings(panel){const settings={debugMode:panel.querySelector('#enableDebugMode').checked,notifications:panel.querySelector('#enableNotifications').checked,cacheDuration:parseInt(panel.querySelector('#cacheDuration').value)};localStorage.setItem('etl_advanced_settings',JSON.stringify(settings));this.showFeedback('Configurações salvas','success');if(settings.debugMode){console.log('Modo debug ativado')}}toggleAutoRefresh(enabled){this.isAutoRefreshEnabled=enabled;if(enabled){this.startAutoRefresh();this.showFeedback('Auto-refresh ativado','info')}else{this.stopAutoRefresh();this.showFeedback('Auto-refresh desativado','info')}this.updateAutoRefreshBadge();this.saveSettings()}updateRefreshInterval(seconds){this.refreshInterval=seconds;const intervalValue=document.querySelector('.interval-value');if(intervalValue){intervalValue.textContent=`${seconds}s`}if(this.isAutoRefreshEnabled){this.stopAutoRefresh();this.startAutoRefresh()}this.saveSettings()}startAutoRefresh(){this.stopAutoRefresh();this.refreshTimer=setInterval(()=>{console.log('Auto-refresh executando...');this.handleRefreshAll()},this.refreshInterval*1000)}stopAutoRefresh(){if(this.refreshTimer){clearInterval(this.refreshTimer);this.refreshTimer=null}}updateAutoRefreshBadge(){const badge=document.querySelector('.section-badge.auto-refresh');if(badge){badge.textContent=`Auto-refresh:${this.isAutoRefreshEnabled ? 'ON':'OFF'}`;badge.className=`section-badge auto-refresh ${this.isAutoRefreshEnabled ? 'active':'inactive'}`}}async executeOperation(buttonId,title,operation){const button=document.getElementById(buttonId);const progressPanel=document.getElementById('actionProgress');try{this.activeOperations.add(buttonId);if(button){button.disabled=true;button.classList.add('loading')}this.showProgress(title,'Executando operação...');await operation()}catch(error){console.error(`Erro na operação ${buttonId}:`,error);throw error}finally{this.activeOperations.delete(buttonId);if(button){button.disabled=false;button.classList.remove('loading')}this.hideProgress()}}showProgress(title,description,percent=0){const progressPanel=document.getElementById('actionProgress');const progressTitle=document.getElementById('progressTitle');const progressDescription=document.getElementById('progressDescription');const progressFill=document.getElementById('progressFill');const progressPercent=document.getElementById('progressPercent');if(progressPanel){if(progressTitle)progressTitle.textContent=title;if(progressDescription)progressDescription.textContent=description;if(progressFill)progressFill.style.width=`${percent}%`;if(progressPercent)progressPercent.textContent=`${percent}%`;progressPanel.style.display='block'}}hideProgress(){const progressPanel=document.getElementById('actionProgress');if(progressPanel){setTimeout(()=>{progressPanel.style.display='none'},500)}}showFeedback(message,type='info',duration=5000){const container=document.getElementById('controlFeedback');if(!container)return;const messageElement=document.createElement('div');messageElement.className=`feedback-message ${type}`;messageElement.innerHTML=` <svg width="20" height="20" viewBox="0 0 24 24" fill="none"> ${this.getFeedbackIcon(type)}</svg> <span>${message}</span> `;container.appendChild(messageElement);setTimeout(()=>{if(messageElement.parentNode){messageElement.style.animation='slideOutRight 0.3s ease';setTimeout(()=>{messageElement.remove()},300)}},duration);messageElement.addEventListener('click',()=>{messageElement.remove()})}getFeedbackIcon(type){const icons={success:'<path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/>',error:'<path d="M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/>',warning:'<path d="M12 9V13M12 17H12.01M10.29 3.86L1.82 18C1.64466 18.3024 1.55685 18.6453 1.56567 18.9928C1.57449 19.3403 1.67953 19.6781 1.87013 19.9725C2.06073 20.2669 2.33033 20.5068 2.6492 20.6687C2.96806 20.8305 3.32405 20.9089 3.68 20.896H20.32C20.676 20.9089 21.0319 20.8305 21.3508 20.6687C21.6697 20.5068 21.9393 20.2669 22.1299 19.9725C22.3205 19.6781 22.4255 19.3403 22.4343 18.9928C22.4432 18.6453 22.3553 18.3024 22.18 18L13.71 3.86C13.5317 3.56611 13.2807 3.32312 12.9812 3.15448C12.6817 2.98585 12.3437 2.89725 12 2.89725C11.6563 2.89725 11.3183 2.98585 11.0188 3.15448C10.7193 3.32312 10.4683 3.56611 10.29 3.86V3.86Z" stroke="currentColor" stroke-width="2"/>',info:'<path d="M13 16H12V12H11M12 8H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/>'};return icons[type] || icons.info}async verifyDatabaseStatus(){const response=await fetch('/sistema/dashboard/api/database-status.php');return response.json()}async loadStats(){const response=await fetch('/sistema/dashboard/api/stats.php');return response.json()}async loadCharts(){if(typeof window.expertzyCharts !=='undefined'){return window.expertzyCharts.loadChartData()}return Promise.resolve()}updateStatCards(stats){Object.keys(stats).forEach(key=>{const element=document.querySelector(`[data-stat="${key}"]`);if(element){element.textContent=typeof stats[key]==='number' ? stats[key].toLocaleString():stats[key]}})}updateSystemStatus(status){Object.keys(status).forEach(key=>{const indicator=document.querySelector(`[data-status="${key}"]`);if(indicator){indicator.className=`status-indicator ${status[key] ? 'online':'offline'}`}})}saveSettings(){const settings={autoRefresh:this.isAutoRefreshEnabled,refreshInterval:this.refreshInterval};document.cookie=`etl_auto_refresh=${this.isAutoRefreshEnabled};path=/;max-age=2592000`;document.cookie=`etl_refresh_interval=${this.refreshInterval};path=/;max-age=2592000`;localStorage.setItem('etl_control_settings',JSON.stringify(settings))}loadSavedSettings(){try{const saved=localStorage.getItem('etl_control_settings');if(saved){const settings=JSON.parse(saved);this.isAutoRefreshEnabled=settings.autoRefresh || false;this.refreshInterval=settings.refreshInterval || 60;const autoRefreshToggle=document.getElementById('autoRefreshToggle');if(autoRefreshToggle){autoRefreshToggle.checked=this.isAutoRefreshEnabled}const refreshIntervalSlider=document.getElementById('refreshInterval');if(refreshIntervalSlider){refreshIntervalSlider.value=this.refreshInterval}this.updateAutoRefreshBadge();if(this.isAutoRefreshEnabled){this.startAutoRefresh()}}}catch(error){console.warn('Erro ao carregar configurações salvas:',error)}}}let manualControlPanel;function initManualControlPanel(){manualControlPanel=new ManualControlPanel();window.manualControlPanel=manualControlPanel;console.log('Manual Control Panel inicializado com sucesso')}if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',initManualControlPanel)}else{initManualControlPanel()}const additionalStyles=document.createElement('style');additionalStyles.textContent=` .control-btn.loading{opacity:0.7;pointer-events:none;position:relative}.control-btn.loading::after{content:'';position:absolute;top:50%;left:50%;width:16px;height:16px;margin:-8px 0 0-8px;border:2px solid transparent;border-top:2px solid currentColor;border-radius:50%;animation:spin 1s linear infinite}.advanced-settings-panel .settings-overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.5);z-index:1000;display:flex;align-items:center;justify-content:center}.advanced-settings-panel .settings-modal{background:white;border-radius:16px;padding:2rem;max-width:500px;width:90%;max-height:80vh;overflow-y:auto;box-shadow:0 20px 40px rgba(0,0,0,0.15)}.advanced-settings-panel .settings-header{display:flex;align-items:center;justify-content:space-between;margin-bottom:1.5rem}.advanced-settings-panel .close-settings{background:none;border:none;font-size:1.5rem;cursor:pointer;padding:0.5rem;border-radius:8px}.advanced-settings-panel .setting-group{margin-bottom:1.5rem}.advanced-settings-panel .setting-group label{display:flex;align-items:center;gap:0.5rem;font-weight:500;margin-bottom:0.25rem}.advanced-settings-panel .setting-group small{color:#6b7280;font-size:0.875rem}.advanced-settings-panel .settings-actions{display:flex;gap:1rem;justify-content:flex-end;margin-top:2rem}@keyframes slideOutRight{to{transform:translateX(100%);opacity:0}}`;document.head.appendChild(additionalStyles);
/* manual-control-system.js */
class DashboardState{constructor(){this.database={status:'unknown',connected:false,schema_ready:false,dis_count:0,sufficient:false,last_check:null};this.charts={loaded:false,available_types:['temporal','taxes','expenses','currencies','states','correlation'],failed_types:[],last_load:null};this.stats={loaded:false,data:{},last_load:null};this.autoRefresh={enabled:false,interval:30000,timer:null};this.operations={active:new Set(),history:[]};this.init()}init(){this.loadPersistedState();this.setupEventHandlers();console.log('✅ DashboardState inicializado')}canLoadCharts(){return this.database.connected && this.database.schema_ready && this.database.sufficient && this.database.dis_count > 0}canLoadStats(){return this.database.connected && this.database.schema_ready && this.database.dis_count > 0}getNextRecommendedAction(){if(!this.database.connected){return{action:'verify_database',title:'Verificar Conexão do Banco',description:'Sistema precisa verificar status do MySQL',priority:'high',icon:'database'}}if(!this.database.schema_ready){return{action:'setup_schema',title:'Configurar Schema do Banco',description:'Estrutura do banco precisa ser instalada',priority:'high',icon:'settings'}}if(this.database.dis_count===0){return{action:'import_xml',title:'Importar XMLs de DI',description:'Sistema precisa de dados para funcionar',priority:'medium',icon:'upload'}}if(!this.charts.loaded){return{action:'load_charts',title:'Carregar Gráficos',description:'Visualizações estão prontas para carregamento',priority:'low',icon:'chart'}}return{action:'system_ready',title:'Sistema Operacional',description:'Todas as funcionalidades estão disponíveis',priority:'info',icon:'check'}}updateDatabaseState(dbStatus){const previous={...this.database};this.database={...this.database,...dbStatus,sufficient:dbStatus.dis_count > 0,last_check:new Date().toISOString()};if(previous.connected !==this.database.connected || previous.dis_count !==this.database.dis_count){this.emit('database-changed',this.database,previous)}this.persistState()}updateChartsState(chartsData){this.charts={...this.charts,loaded:true,last_load:new Date().toISOString(),failed_types:chartsData.failed || []};this.emit('charts-loaded',this.charts);this.persistState()}updateStatsState(statsData){this.stats={loaded:true,data:statsData,last_load:new Date().toISOString()};this.emit('stats-loaded',this.stats);this.persistState()}setOperationActive(operationId,details={}){this.operations.active.add(operationId);this.operations.history.unshift({id:operationId,status:'active',started:new Date().toISOString(),...details});this.emit('operation-started',operationId)}setOperationComplete(operationId,result={}){this.operations.active.delete(operationId);const historyItem=this.operations.history.find(h=> h.id===operationId);if(historyItem){historyItem.status=result.success ? 'completed':'failed';historyItem.completed=new Date().toISOString();historyItem.result=result}this.emit('operation-completed',operationId,result)}isOperationActive(operationId){return this.operations.active.has(operationId)}setupEventHandlers(){this.eventListeners=new Map()}on(event,callback){if(!this.eventListeners.has(event)){this.eventListeners.set(event,[])}this.eventListeners.get(event).push(callback)}emit(event,...args){const listeners=this.eventListeners.get(event);if(listeners){listeners.forEach(callback=>{try{callback(...args)}catch(error){console.error(`Erro no event listener ${event}:`,error)}})}}persistState(){try{const stateToSave={database:this.database,charts:this.charts,stats:this.stats,autoRefresh:this.autoRefresh,saved_at:new Date().toISOString()};localStorage.setItem('etl_dashboard_state',JSON.stringify(stateToSave))}catch(error){console.warn('Erro ao persistir estado:',error)}}loadPersistedState(){try{const saved=localStorage.getItem('etl_dashboard_state');if(saved){const state=JSON.parse(saved);const now=new Date();const savedAt=new Date(state.saved_at);if(now-savedAt < 3600000){this.database={...this.database,...state.database};this.charts={...this.charts,...state.charts};this.stats={...this.stats,...state.stats};this.autoRefresh={...this.autoRefresh,...state.autoRefresh}}}}catch(error){console.warn('Erro ao carregar estado persistido:',error)}}}class AutoRefreshManager{constructor(dashboardState){this.state=dashboardState;this.timer=null;this.isRunning=false;this.defaultInterval=30000;this.currentInterval=this.defaultInterval;this.callbacks={onRefresh:null,onStart:null,onStop:null,onError:null}}setCallbacks(callbacks){this.callbacks={...this.callbacks,...callbacks}}start(interval=null){if(this.isRunning){this.stop()}this.currentInterval=interval || this.currentInterval;this.isRunning=true;this.timer=setInterval(()=>{this.executeRefresh()},this.currentInterval);this.state.autoRefresh.enabled=true;this.state.autoRefresh.interval=this.currentInterval;this.state.persistState();if(this.callbacks.onStart){this.callbacks.onStart(this.currentInterval)}console.log(`🔄 Auto-refresh iniciado:${this.currentInterval/1000}s`)}stop(){if(this.timer){clearInterval(this.timer);this.timer=null}this.isRunning=false;this.state.autoRefresh.enabled=false;this.state.persistState();if(this.callbacks.onStop){this.callbacks.onStop()}console.log('⏹️ Auto-refresh parado')}toggle(interval=null){if(this.isRunning){this.stop()}else{this.start(interval)}return this.isRunning}updateInterval(newInterval){this.currentInterval=newInterval;if(this.isRunning){this.stop();this.start(newInterval)}this.state.autoRefresh.interval=newInterval;this.state.persistState()}async executeRefresh(){if(!this.callbacks.onRefresh){console.warn('Callback onRefresh não configurado');return}try{console.log('🔄 Executando auto-refresh...');await this.callbacks.onRefresh()}catch(error){console.error('Erro no auto-refresh:',error);if(this.callbacks.onError){this.callbacks.onError(error)}}}getStatus(){return{isRunning:this.isRunning,interval:this.currentInterval,nextRefresh:this.isRunning ? new Date(Date.now()+this.currentInterval).toISOString():null}}}class FeedbackSystem{constructor(){this.container=null;this.activeToasts=new Map();this.loadingStates=new Map();this.init()}init(){this.createContainer();console.log('✅ FeedbackSystem inicializado')}createContainer(){this.container=document.createElement('div');this.container.id='feedback-container';this.container.className='feedback-container';document.body.appendChild(this.container);if(!document.getElementById('feedback-system-styles')){this.addStyles()}}showToast(message,type='info',options={}){const id=`toast-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;const duration=options.duration || this.getDefaultDuration(type);const persistent=options.persistent || false;const toast=document.createElement('div');toast.id=id;toast.className=`feedback-toast toast-${type}`;toast.innerHTML=` <div class="toast-icon"> ${this.getIcon(type)}</div> <div class="toast-content"> <div class="toast-message">${message}</div> ${options.subtitle ? `<div class="toast-subtitle">${options.subtitle}</div>`:''}</div> <button class="toast-close" aria-label="Fechar"> <svg width="14" height="14" viewBox="0 0 24 24" fill="none"> <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2"/> </svg> </button> `;const closeBtn=toast.querySelector('.toast-close');closeBtn.addEventListener('click',()=> this.removeToast(id));this.container.appendChild(toast);this.activeToasts.set(id,toast);requestAnimationFrame(()=>{toast.classList.add('toast-show')});if(!persistent && duration > 0){setTimeout(()=>{this.removeToast(id)},duration)}return id}removeToast(id){const toast=this.activeToasts.get(id);if(toast){toast.classList.add('toast-hide');setTimeout(()=>{if(toast.parentNode){toast.parentNode.removeChild(toast)}this.activeToasts.delete(id)},300)}}showLoading(elementId,message='Carregando...'){const element=document.getElementById(elementId);if(!element)return;const overlay=document.createElement('div');overlay.className='loading-overlay';overlay.innerHTML=` <div class="loading-content"> <div class="loading-spinner"> <div class="spinner"></div> </div> <div class="loading-message">${message}</div> </div> `;element.style.position='relative';element.appendChild(overlay);this.loadingStates.set(elementId,overlay);return overlay}hideLoading(elementId){const overlay=this.loadingStates.get(elementId);if(overlay){overlay.classList.add('loading-hide');setTimeout(()=>{if(overlay.parentNode){overlay.parentNode.removeChild(overlay)}this.loadingStates.delete(elementId)},300)}}showProgress(title,message='',progress=0){let progressContainer=document.getElementById('global-progress');if(!progressContainer){progressContainer=document.createElement('div');progressContainer.id='global-progress';progressContainer.className='global-progress';document.body.appendChild(progressContainer)}progressContainer.innerHTML=` <div class="progress-overlay"> <div class="progress-modal"> <div class="progress-header"> <h4>${title}</h4> </div> <div class="progress-body"> <div class="progress-message">${message}</div> <div class="progress-bar"> <div class="progress-fill" style="width:${progress}%"></div> </div> <div class="progress-percent">${Math.round(progress)}%</div> </div> </div> </div> `;progressContainer.style.display='block'}updateProgress(progress,message=null){const progressContainer=document.getElementById('global-progress');if(!progressContainer)return;const progressFill=progressContainer.querySelector('.progress-fill');const progressPercent=progressContainer.querySelector('.progress-percent');const progressMessage=progressContainer.querySelector('.progress-message');if(progressFill){progressFill.style.width=`${progress}%`}if(progressPercent){progressPercent.textContent=`${Math.round(progress)}%`}if(message && progressMessage){progressMessage.textContent=message}}hideProgress(){const progressContainer=document.getElementById('global-progress');if(progressContainer){progressContainer.style.display='none'}}getDefaultDuration(type){const durations={success:4000,error:8000,warning:6000,info:5000};return durations[type] || 5000}getIcon(type){const icons={success:'<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/></svg>',error:'<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/></svg>',warning:'<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M12 9V13M12 17H12.01M10.29 3.86L1.82 18C1.64466 18.3024 1.55685 18.6453 1.56567 18.9928C1.57449 19.3403 1.67953 19.6781 1.87013 19.9725C2.06073 20.2669 2.33033 20.5068 2.6492 20.6687C2.96806 20.8305 3.32405 20.9089 3.68 20.896H20.32C20.676 20.9089 21.0319 20.8305 21.3508 20.6687C21.6697 20.5068 21.9393 20.2669 22.1299 19.9725C22.3205 19.6781 22.4255 19.3403 22.4343 18.9928C22.4432 18.6453 22.3553 18.3024 22.18 18L13.71 3.86C13.5317 3.56611 13.2807 3.32312 12.9812 3.15448C12.6817 2.98585 12.3437 2.89725 12 2.89725C11.6563 2.89725 11.3183 2.98585 11.0188 3.15448C10.7193 3.32312 10.4683 3.56611 10.29 3.86V3.86Z" stroke="currentColor" stroke-width="2"/></svg>',info:'<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M13 16H12V12H11M12 8H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/></svg>',loading:'<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M21 12C21 16.9706 16.9706 21 12 21M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/></svg>'};return icons[type] || icons.info}addStyles(){const styles=document.createElement('style');styles.id='feedback-system-styles';styles.textContent=` .feedback-container{position:fixed;top:20px;right:20px;z-index:10000;pointer-events:none;max-width:400px}.feedback-toast{display:flex;align-items:center;background:white;border-radius:12px;padding:16px;margin-bottom:12px;box-shadow:0 8px 32px rgba(0,0,0,0.12);border-left:4px solid #E5E7EB;pointer-events:all;transform:translateX(100%);opacity:0;transition:all 0.3s ease;max-width:100%}.feedback-toast.toast-show{transform:translateX(0);opacity:1}.feedback-toast.toast-hide{transform:translateX(100%);opacity:0}.feedback-toast.toast-success{border-left-color:#10B981}.feedback-toast.toast-error{border-left-color:#EF4444}.feedback-toast.toast-warning{border-left-color:#F59E0B}.feedback-toast.toast-info{border-left-color:#3B82F6}.toast-icon{flex-shrink:0;margin-right:12px;color:inherit}.toast-success .toast-icon{color:#10B981}.toast-error .toast-icon{color:#EF4444}.toast-warning .toast-icon{color:#F59E0B}.toast-info .toast-icon{color:#3B82F6}.toast-content{flex:1;min-width:0}.toast-message{font-weight:500;color:#111827;font-size:14px;line-height:1.4}.toast-subtitle{color:#6B7280;font-size:12px;margin-top:2px}.toast-close{flex-shrink:0;background:none;border:none;color:#9CA3AF;cursor:pointer;padding:4px;border-radius:4px;margin-left:8px;transition:color 0.2s}.toast-close:hover{color:#6B7280;background:#F3F4F6}.loading-overlay{position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(255,255,255,0.9);display:flex;align-items:center;justify-content:center;z-index:1000;border-radius:inherit;backdrop-filter:blur(2px)}.loading-content{text-align:center;color:#6B7280}.loading-spinner{margin-bottom:12px}.spinner{width:24px;height:24px;border:2px solid #E5E7EB;border-top:2px solid #FF002D;border-radius:50%;animation:spin 1s linear infinite;margin:0 auto}.loading-message{font-size:14px;font-weight:500}.global-progress{position:fixed;top:0;left:0;right:0;bottom:0;z-index:10001;display:none}.progress-overlay{position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center}.progress-modal{background:white;border-radius:16px;padding:24px;min-width:320px;max-width:90%;box-shadow:0 20px 40px rgba(0,0,0,0.15)}.progress-header h4{margin:0 0 16px 0;color:#111827;font-size:18px;font-weight:600}.progress-message{color:#6B7280;margin-bottom:16px;font-size:14px}.progress-bar{background:#E5E7EB;border-radius:8px;height:8px;overflow:hidden;margin-bottom:12px}.progress-fill{background:#FF002D;height:100%;border-radius:8px;transition:width 0.3s ease}.progress-percent{text-align:center;font-weight:600;color:#374151;font-size:14px}@keyframes spin{to{transform:rotate(360deg)}}`;document.head.appendChild(styles)}}class APIIntegration{constructor(feedbackSystem){this.feedback=feedbackSystem;this.baseUrl='/sistema/dashboard/api/dashboard';this.retryConfig={maxRetries:3,retryDelay:1000,exponentialBackoff:true}}async checkDatabaseStatus(){return this.makeRequest('/database-status.php',{method:'GET',description:'Verificando status do banco de dados'})}async executePreCheck(){return this.makeRequest('/pre-check.php',{method:'POST',description:'Executando verificação prévia'})}async clearCache(){return this.makeRequest('/clear-cache.php',{method:'POST',description:'Limpando cache do sistema'})}async loadChartsData(chartType='all'){const url=chartType==='all' ? '/charts.php':`/charts.php?type=${chartType}`;return this.makeRequest(url,{method:'GET',description:`Carregando dados dos gráficos(${chartType})`})}async loadStats(){return this.makeRequest('/stats.php',{method:'GET',description:'Carregando estatísticas do sistema'})}async makeRequest(endpoint,options={}){const url=`${this.baseUrl}${endpoint}`;const requestOptions={method:options.method || 'GET',headers:{'Content-Type':'application/json',...options.headers},...options.fetchOptions};if(options.body){requestOptions.body=JSON.stringify(options.body)}let lastError;for(let attempt=0;attempt <=this.retryConfig.maxRetries;attempt++){try{console.log(`🌐 ${options.description || 'Requisição'}-Tentativa ${attempt+1}`);const response=await fetch(url,requestOptions);if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}const data=await response.json();if(attempt > 0){this.feedback.showToast(`${options.description}realizada com sucesso após ${attempt+1}tentativas`,'success')}return data}catch(error){lastError=error;console.warn(`Tentativa ${attempt+1}falhou:`,error.message);if(attempt < this.retryConfig.maxRetries){const delay=this.retryConfig.exponentialBackoff ? this.retryConfig.retryDelay*Math.pow(2,attempt):this.retryConfig.retryDelay;await this.sleep(delay)}}}const errorMessage=`${options.description || 'Operação'}falhou após ${this.retryConfig.maxRetries+1}tentativas`;this.feedback.showToast(errorMessage,'error');throw new Error(`${errorMessage}:${lastError.message}`)}sleep(ms){return new Promise(resolve=> setTimeout(resolve,ms))}}class ManualControlSystem{constructor(){this.state=new DashboardState();this.feedback=new FeedbackSystem();this.api=new APIIntegration(this.feedback);this.autoRefresh=new AutoRefreshManager(this.state);this.initComponents();this.setupEventListeners();this.loadInitialState();console.log('✅ ManualControlSystem inicializado completamente')}initComponents(){this.autoRefresh.setCallbacks({onRefresh:()=> this.handleRefreshAll(),onStart:(interval)=>{this.feedback.showToast(`Auto-refresh ativado(${interval/1000}s)`,'info')},onStop:()=>{this.feedback.showToast('Auto-refresh desativado','info')},onError:(error)=>{this.feedback.showToast('Erro no auto-refresh','error');console.error('Auto-refresh error:',error)}});this.state.on('database-changed',(newState,oldState)=>{this.updateUIBasedOnState();this.updateRecommendations()});this.state.on('charts-loaded',()=>{this.feedback.showToast('Gráficos carregados com sucesso','success')});this.state.on('stats-loaded',()=>{this.feedback.showToast('Estatísticas atualizadas','success')})}setupEventListeners(){this.bindControlButtons();document.addEventListener('keydown',(e)=>{this.handleKeyboardShortcuts(e)});document.addEventListener('chartsDataUpdated',(e)=>{this.state.updateChartsState(e.detail)})}bindControlButtons(){const buttonMappings={'btnVerifyDatabase':()=> this.handleVerifyDatabase(),'btnImportXML':()=> this.handleImportXML(),'btnClearCache':()=> this.handleClearCache(),'btnLoadCharts':()=> this.handleLoadCharts(),'btnLoadStats':()=> this.handleLoadStats(),'btnRefreshAll':()=> this.handleRefreshAll(),'autoRefreshToggle':(e)=> this.handleAutoRefreshToggle(e),'refreshInterval':(e)=> this.handleRefreshIntervalChange(e)};Object.entries(buttonMappings).forEach(([id,handler])=>{const element=document.getElementById(id);if(element){element.replaceWith(element.cloneNode(true));const newElement=document.getElementById(id);if(id==='autoRefreshToggle'){newElement.addEventListener('change',handler)}else if(id==='refreshInterval'){newElement.addEventListener('input',handler)}else{newElement.addEventListener('click',(e)=>{e.preventDefault();if(!newElement.disabled && !this.state.isOperationActive(id)){handler()}})}}})}async loadInitialState(){if(!this.state.database.last_check ||(Date.now()-new Date(this.state.database.last_check).getTime())> 300000){await this.handleVerifyDatabase(true)}this.updateUIBasedOnState();this.updateRecommendations()}async handleVerifyDatabase(silent=false){const operationId='verify-database';if(this.state.isOperationActive(operationId)){return}this.state.setOperationActive(operationId,{type:'database-check',silent});if(!silent){this.feedback.showLoading('manualControlPanel','Verificando banco de dados...')}try{const result=await this.api.checkDatabaseStatus();if(result.success){this.state.updateDatabaseState(result.status);if(!silent){this.feedback.showToast('Status do banco verificado','success',{subtitle:`${result.status.dis_count}DIs encontradas`})}this.state.setOperationComplete(operationId,{success:true})}else{throw new Error(result.message || 'Erro na verificação do banco')}}catch(error){console.error('Erro na verificação do banco:',error);if(!silent){this.feedback.showToast('Erro ao verificar banco de dados','error',{subtitle:error.message})}this.state.setOperationComplete(operationId,{success:false,error:error.message})}finally{if(!silent){this.feedback.hideLoading('manualControlPanel')}}}async handleImportXML(){const uploadInput=document.getElementById('fileInput');const uploadZone=document.getElementById('uploadZone');if(uploadInput){uploadInput.click()}else if(uploadZone){uploadZone.click()}else{this.showUploadModal()}}async handleClearCache(){const operationId='clear-cache';if(this.state.isOperationActive(operationId)){return}if(!confirm('Tem certeza que deseja limpar o cache? Esta ação não pode ser desfeita.')){return}this.state.setOperationActive(operationId,{type:'cache-clear'});this.feedback.showProgress('Limpando Cache','Removendo dados temporários...',0);try{this.feedback.updateProgress(25,'Limpando cache local...');localStorage.removeItem('etl_dashboard_cache');localStorage.removeItem('etl_charts_cache');sessionStorage.clear();this.feedback.updateProgress(50,'Limpando cache do servidor...');await this.api.clearCache();this.feedback.updateProgress(75,'Finalizando limpeza...');await new Promise(resolve=> setTimeout(resolve,1000));this.feedback.updateProgress(100,'Cache limpo com sucesso');setTimeout(()=>{this.feedback.hideProgress();this.feedback.showToast('Cache limpo com sucesso','success')},1000);this.state.setOperationComplete(operationId,{success:true})}catch(error){console.error('Erro ao limpar cache:',error);this.feedback.hideProgress();this.feedback.showToast('Cache local limpo(erro no servidor)','warning',{subtitle:error.message});this.state.setOperationComplete(operationId,{success:false,error:error.message})}}async handleLoadCharts(){if(!this.state.canLoadCharts()){this.feedback.showToast('Não é possível carregar gráficos','warning',{subtitle:'Verifique se há dados suficientes no banco'});return}const operationId='load-charts';if(this.state.isOperationActive(operationId)){return}this.state.setOperationActive(operationId,{type:'charts-load'});this.feedback.showProgress('Carregando Gráficos','Processando dados...',0);try{if(typeof window.expertzyCharts !=='undefined'){this.feedback.updateProgress(25,'Sistema de gráficos detectado...');this.feedback.updateProgress(50,'Carregando dados dos gráficos...');await window.expertzyCharts.manualLoadCharts();this.feedback.updateProgress(100,'Gráficos carregados')}else{this.feedback.updateProgress(30,'Carregando dados via API...');const result=await this.api.loadChartsData();if(result.success){this.feedback.updateProgress(70,'Processando dados dos gráficos...');this.state.updateChartsState(result.charts);document.dispatchEvent(new CustomEvent('chartsDataUpdated',{detail:result.charts}));this.feedback.updateProgress(100,'Gráficos atualizados')}else{throw new Error(result.message || 'Erro ao carregar gráficos')}}setTimeout(()=>{this.feedback.hideProgress()},1000);this.state.setOperationComplete(operationId,{success:true})}catch(error){console.error('Erro ao carregar gráficos:',error);this.feedback.hideProgress();this.feedback.showToast('Erro ao carregar gráficos','error',{subtitle:error.message});this.state.setOperationComplete(operationId,{success:false,error:error.message})}}async handleLoadStats(){if(!this.state.canLoadStats()){this.feedback.showToast('Não é possível carregar estatísticas','warning',{subtitle:'Banco de dados sem dados suficientes'});return}const operationId='load-stats';if(this.state.isOperationActive(operationId)){return}this.state.setOperationActive(operationId,{type:'stats-load'});this.feedback.showLoading('manualControlPanel','Carregando estatísticas...');try{const result=await this.api.loadStats();if(result.success){this.state.updateStatsState(result.data);this.updateStatCards(result.data);this.feedback.showToast('Estatísticas atualizadas','success',{subtitle:`${Object.keys(result.data).length}métricas carregadas`})}else{throw new Error(result.message || 'Erro ao carregar estatísticas')}this.state.setOperationComplete(operationId,{success:true})}catch(error){console.error('Erro ao carregar estatísticas:',error);this.feedback.showToast('Erro ao carregar estatísticas','error',{subtitle:error.message});this.state.setOperationComplete(operationId,{success:false,error:error.message})}finally{this.feedback.hideLoading('manualControlPanel')}}async handleRefreshAll(){const operationId='refresh-all';if(this.state.isOperationActive(operationId)){return}this.state.setOperationActive(operationId,{type:'full-refresh'});this.feedback.showProgress('Atualizando Sistema','Iniciando atualização completa...',0);try{const operations=[];let progress=0;this.feedback.updateProgress(progress,'Verificando status do banco...');operations.push(this.handleVerifyDatabase(true));await operations[0];progress=25;this.feedback.updateProgress(progress,'Status do banco verificado');if(this.state.canLoadStats()){this.feedback.updateProgress(progress,'Carregando estatísticas...');operations.push(this.handleLoadStats());await operations[operations.length-1];progress=50;this.feedback.updateProgress(progress,'Estatísticas carregadas')}if(this.state.canLoadCharts()){this.feedback.updateProgress(progress,'Carregando gráficos...');operations.push(this.handleLoadCharts());await operations[operations.length-1];progress=100;this.feedback.updateProgress(progress,'Sistema completamente atualizado')}else{progress=100;this.feedback.updateProgress(progress,'Atualização parcial concluída')}setTimeout(()=>{this.feedback.hideProgress();this.feedback.showToast('Sistema atualizado com sucesso','success',{subtitle:`${operations.length}operações executadas`})},1500);this.state.setOperationComplete(operationId,{success:true,operations:operations.length})}catch(error){console.error('Erro na atualização completa:',error);this.feedback.hideProgress();this.feedback.showToast('Erro na atualização do sistema','error',{subtitle:error.message});this.state.setOperationComplete(operationId,{success:false,error:error.message})}}handleAutoRefreshToggle(event){const enabled=event.target.checked;if(enabled){this.autoRefresh.start()}else{this.autoRefresh.stop()}this.updateAutoRefreshUI()}handleRefreshIntervalChange(event){const interval=parseInt(event.target.value)*1000;this.autoRefresh.updateInterval(interval);const intervalValue=document.querySelector('.interval-value');if(intervalValue){intervalValue.textContent=`${event.target.value}s`}}handleKeyboardShortcuts(event){if((event.ctrlKey || event.metaKey)&& event.shiftKey){switch(event.key.toLowerCase()){case 'v':event.preventDefault();this.handleVerifyDatabase();break;case 'r':event.preventDefault();this.handleRefreshAll();break;case 'c':event.preventDefault();this.handleLoadCharts();break;case 's':event.preventDefault();this.handleLoadStats();break;case 'i':event.preventDefault();this.handleImportXML();break}}}updateUIBasedOnState(){const buttons={'btnVerifyDatabase':true,'btnImportXML':this.state.database.connected,'btnClearCache':true,'btnLoadCharts':this.state.canLoadCharts(),'btnLoadStats':this.state.canLoadStats(),'btnRefreshAll':this.state.database.connected};Object.entries(buttons).forEach(([id,enabled])=>{const button=document.getElementById(id);if(button){button.disabled=!enabled;if(enabled){button.classList.remove('disabled')}else{button.classList.add('disabled')}}});this.updateStatusIndicators();this.updateCounters()}updateStatusIndicators(){const indicators={database:this.state.database.connected,schema:this.state.database.schema_ready,data:this.state.database.sufficient};Object.entries(indicators).forEach(([type,status])=>{const elements=document.querySelectorAll(`[data-status="${type}"]`);elements.forEach(element=>{element.className=`status-indicator ${status ? 'success':'error'}`})});const mainStatus=document.querySelector('.status-indicator-main');if(mainStatus){const isActive=this.state.database.sufficient;mainStatus.className=`status-indicator-main ${isActive ? 'active':'inactive'}`;const statusText=mainStatus.querySelector('.status-text');if(statusText){statusText.textContent=isActive ? 'Sistema Ativo':'Aguardando Dados'}}}updateCounters(){const disCountElements=document.querySelectorAll('[data-counter="dis-count"]');disCountElements.forEach(element=>{element.textContent=this.state.database.dis_count.toLocaleString()});const lastUpdateElements=document.querySelectorAll('[data-timestamp="last-update"]');lastUpdateElements.forEach(element=>{if(this.state.database.last_check){const date=new Date(this.state.database.last_check);element.textContent=date.toLocaleString('pt-BR',{day:'2-digit',month:'2-digit',hour:'2-digit',minute:'2-digit'})}else{element.textContent='Nunca'}})}updateRecommendations(){const nextAction=this.state.getNextRecommendedAction();const nextStepCard=document.querySelector('.next-step-card');if(nextStepCard){nextStepCard.className=`next-step-card ${nextAction.priority}`;const stepTitle=nextStepCard.querySelector('h4');const stepDesc=nextStepCard.querySelector('p');if(stepTitle)stepTitle.textContent=nextAction.title;if(stepDesc)stepDesc.textContent=nextAction.description}}updateStatCards(stats){Object.entries(stats).forEach(([key,value])=>{const valueElement=document.getElementById(`stat-${key.replace('_','-')}-value`);const changeElement=document.getElementById(`stat-${key.replace('_','-')}-change`);if(valueElement){if(typeof value==='object' && value.value !==undefined){valueElement.textContent=value.value;if(changeElement && value.change !==undefined){const changeSpan=changeElement.querySelector('span');if(changeSpan){const changeText=value.change > 0 ? `+${value.change}%`:`${value.change}%`;changeSpan.textContent=changeText}const trend=value.change > 0 ? 'positive':value.change < 0 ? 'negative':'neutral';changeElement.className=`stat-card-change ${trend}`}}else{valueElement.textContent=typeof value==='number' ? value.toLocaleString('pt-BR'):value}}})}updateAutoRefreshUI(){const status=this.autoRefresh.getStatus();const toggle=document.getElementById('autoRefreshToggle');if(toggle){toggle.checked=status.isRunning}const badge=document.querySelector('.section-badge.auto-refresh');if(badge){badge.textContent=`Auto-refresh:${status.isRunning ? 'ON':'OFF'}`;badge.className=`section-badge auto-refresh ${status.isRunning ? 'active':'inactive'}`}const intervalControl=document.querySelector('.interval-control');if(intervalControl){intervalControl.style.opacity=status.isRunning ? '1':'0.5';intervalControl.style.pointerEvents=status.isRunning ? 'auto':'none'}}showUploadModal(){const modal=document.createElement('div');modal.className='upload-modal-overlay';modal.innerHTML=` <div class="upload-modal"> <div class="upload-modal-header"> <h3>Importar XML de DI</h3> <button class="upload-modal-close">&times;</button> </div> <div class="upload-modal-body"> <div class="upload-zone" id="tempUploadZone"> <div class="upload-icon"> <svg width="48" height="48" viewBox="0 0 24 24" fill="none"> <path d="M21 15V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V15M17 8L12 3M12 3L7 8M12 3V15" stroke="currentColor" stroke-width="2"/> </svg> </div> <h4>Arraste arquivos XML aqui</h4> <p>ou clique para selecionar</p> <input type="file" accept=".xml" multiple style="display:none;"> </div> </div> </div> `;document.body.appendChild(modal);modal.querySelector('.upload-modal-close').addEventListener('click',()=>{modal.remove()});modal.addEventListener('click',(e)=>{if(e.target===modal){modal.remove()}});const uploadZone=modal.querySelector('#tempUploadZone');const fileInput=modal.querySelector('input[type="file"]');uploadZone.addEventListener('click',()=>{fileInput.click()});fileInput.addEventListener('change',(e)=>{if(e.target.files.length > 0){this.feedback.showToast(`${e.target.files.length}arquivo(s)selecionado(s)`,'info',{subtitle:'Funcionalidade de upload será implementada'});modal.remove()}})}getState(){return this.state}getFeedback(){return this.feedback}getAutoRefresh(){return this.autoRefresh}async forceRefresh(){return this.handleRefreshAll()}async verifySystem(){return this.handleVerifyDatabase()}}let manualControlSystem;function initManualControlSystem(){if(window.manualControlSystem){console.warn('ManualControlSystem já foi inicializado');return window.manualControlSystem}manualControlSystem=new ManualControlSystem();window.manualControlSystem=manualControlSystem;window.dashboardState=manualControlSystem.getState();window.feedbackSystem=manualControlSystem.getFeedback();window.verifyDatabaseStatus=()=> manualControlSystem.verifySystem();window.loadChartsManually=()=> manualControlSystem.getState().canLoadCharts()? manualControlSystem.handleLoadCharts():manualControlSystem.getFeedback().showToast('Dados insuficientes para gráficos','warning');window.loadStatsManually=()=> manualControlSystem.getState().canLoadStats()? manualControlSystem.handleLoadStats():manualControlSystem.getFeedback().showToast('Dados insuficientes para estatísticas','warning');window.refreshAllManually=()=> manualControlSystem.forceRefresh();console.log('✅ ManualControlSystem inicializado e exposto globalmente');return manualControlSystem}if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',initManualControlSystem)}else{initManualControlSystem()}if(typeof module !=='undefined' && module.exports){module.exports={ManualControlSystem,DashboardState,AutoRefreshManager,FeedbackSystem,APIIntegration}}
/* database-management.js */
class DatabaseManagement{constructor(){this.apiBase='/dashboard/api/dashboard';this.isProcessing=false;this.currentOperation=null;this.init()}init(){this.bindEvents();this.setupModals();console.log('✅ Sistema de Gerenciamento de Banco inicializado')}bindEvents(){document.addEventListener('click',(e)=>{if(e.target.matches('[data-action="database-cleanup"]')){e.preventDefault();this.showCleanupModal()}if(e.target.matches('[data-action="database-export"]')){e.preventDefault();this.showExportModal()}if(e.target.matches('[data-cleanup-type]')){e.preventDefault();const cleanupType=e.target.dataset.cleanupType;this.selectCleanupType(cleanupType)}if(e.target.matches('#execute-cleanup')){e.preventDefault();this.executeCleanup()}if(e.target.matches('[data-export-type]')){e.preventDefault();const exportType=e.target.dataset.exportType;this.selectExportType(exportType)}if(e.target.matches('#execute-export')){e.preventDefault();this.executeExport()}if(e.target.matches('.modal-close,.modal-overlay')){e.preventDefault();this.closeAllModals()}});document.addEventListener('keydown',(e)=>{if(e.key==='Escape'){this.closeAllModals()}})}setupModals(){if(!document.getElementById('cleanup-modal')){this.createCleanupModal()}if(!document.getElementById('export-modal')){this.createExportModal()}}showCleanupModal(){const modal=document.getElementById('cleanup-modal');if(modal){modal.classList.add('active');this.resetCleanupForm()}}showExportModal(){const modal=document.getElementById('export-modal');if(modal){modal.classList.add('active');this.resetExportForm()}}closeAllModals(){const modals=document.querySelectorAll('.modal.active');modals.forEach(modal=>{modal.classList.remove('active')});this.resetForms()}selectCleanupType(type){document.querySelectorAll('[data-cleanup-type]').forEach(btn=>{btn.classList.remove('selected')});document.querySelector(`[data-cleanup-type="${type}"]`).classList.add('selected');this.showCleanupOptions(type)}showCleanupOptions(type){document.querySelectorAll('.cleanup-options').forEach(option=>{option.style.display='none'});const optionElement=document.getElementById(`cleanup-options-${type}`);if(optionElement){optionElement.style.display='block'}const executeBtn=document.getElementById('execute-cleanup');if(executeBtn){executeBtn.disabled=false;executeBtn.dataset.cleanupType=type}}selectExportType(type){document.querySelectorAll('[data-export-type]').forEach(btn=>{btn.classList.remove('selected')});document.querySelector(`[data-export-type="${type}"]`).classList.add('selected');this.showExportOptions(type)}showExportOptions(type){document.querySelectorAll('.export-options').forEach(option=>{option.style.display='none'});const optionElement=document.getElementById(`export-options-${type}`);if(optionElement){optionElement.style.display='block'}const executeBtn=document.getElementById('execute-export');if(executeBtn){executeBtn.disabled=false;executeBtn.dataset.exportType=type}}async executeCleanup(){if(this.isProcessing)return;const executeBtn=document.getElementById('execute-cleanup');const cleanupType=executeBtn.dataset.cleanupType;if(!cleanupType){this.showError('Selecione um tipo de limpeza');return}const requestData=this.prepareCleanupData(cleanupType);if(!requestData){return}try{this.setProcessing(true,'Executando limpeza...');const response=await fetch(`${this.apiBase}/database-cleanup.php`,{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify(requestData)});const result=await response.json();if(result.success){this.showCleanupSuccess(result)}else{this.showError(result.message || 'Erro na limpeza')}}catch(error){console.error('Erro na limpeza:',error);this.showError('Erro de comunicação com o servidor')}finally{this.setProcessing(false)}}async executeExport(){if(this.isProcessing)return;const executeBtn=document.getElementById('execute-export');const exportType=executeBtn.dataset.exportType;if(!exportType){this.showError('Selecione um tipo de exportação');return}const requestData=this.prepareExportData(exportType);if(!requestData){return}try{this.setProcessing(true,'Executando exportação...');const response=await fetch(`${this.apiBase}/database-export.php`,{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify(requestData)});const result=await response.json();if(result.success){this.showExportSuccess(result)}else{this.showError(result.message || 'Erro na exportação')}}catch(error){console.error('Erro na exportação:',error);this.showError('Erro de comunicação com o servidor')}finally{this.setProcessing(false)}}prepareCleanupData(cleanupType){const data={operation:`cleanup_${cleanupType}`};switch(cleanupType){case 'test':const testConfirmation=document.getElementById('test-confirmation').value;if(testConfirmation !=='CONFIRMAR'){this.showError('Digite "CONFIRMAR" para prosseguir com a limpeza de dados de teste');return null}data.confirmation='CONFIRM_CLEANUP_TEST';break;case 'period':const days=document.getElementById('period-days').value;const periodConfirmation=document.getElementById('period-confirmation').value;if(!days || days < 7){this.showError('Especifique um período mínimo de 7 dias');return null}if(periodConfirmation !=='CONFIRMAR'){this.showError('Digite "CONFIRMAR" para prosseguir com a limpeza por período');return null}data.days=parseInt(days);data.confirmation='CONFIRM_CLEANUP_PERIOD';break;case 'di':const numeroDi=document.getElementById('di-number').value;const diConfirmation=document.getElementById('di-confirmation').value;if(!numeroDi || !numeroDi.match(/^[0-9]{10}$/)){this.showError('Digite um número de DI válido(10 dígitos)');return null}if(diConfirmation !=='CONFIRMAR'){this.showError('Digite "CONFIRMAR" para prosseguir com a limpeza da DI');return null}data.numero_di=numeroDi;data.confirmation='CONFIRM_CLEANUP_DI';break;case 'all':const allConfirmation=document.getElementById('all-confirmation').value;const doubleConfirmation=document.getElementById('all-double-confirmation').value;if(allConfirmation !=='CONFIRMAR'){this.showError('Digite "CONFIRMAR" no primeiro campo');return null}if(doubleConfirmation !=='DELETAR TUDO'){this.showError('Digite "DELETAR TUDO" no segundo campo para confirmar');return null}data.confirmation='CONFIRM_CLEANUP_ALL';data.double_confirmation='I_UNDERSTAND_THIS_DELETES_ALL_DATA';break;default:this.showError('Tipo de limpeza inválido');return null}return data}prepareExportData(exportType){const data={export_type:exportType,include_metadata:document.getElementById('include-metadata')?.checked ?? true,pretty_print:document.getElementById('pretty-print')?.checked ?? true,compression:document.getElementById('compression')?.value ?? 'none'};switch(exportType){case 'all':break;case 'period':const startDate=document.getElementById('export-start-date').value;const endDate=document.getElementById('export-end-date').value;if(!startDate || !endDate){this.showError('Especifique as datas de início e fim');return null}if(startDate > endDate){this.showError('Data de início deve ser anterior à data de fim');return null}data.start_date=startDate;data.end_date=endDate;break;case 'di':const numeroDi=document.getElementById('export-di-number').value;if(!numeroDi || !numeroDi.match(/^[0-9]{10}$/)){this.showError('Digite um número de DI válido(10 dígitos)');return null}data.numero_di=numeroDi;break;default:this.showError('Tipo de exportação inválido');return null}return data}showCleanupSuccess(result){const totalDeleted=result.data.total_deleted || 0;const operation=result.data.operation;let message=`✅ Limpeza concluída com sucesso!\\n\\n`;message+=`Operação:${operation}\\n`;message+=`Registros deletados:${totalDeleted}\\n\\n`;if(result.data.records_deleted){message+=`Detalhes por tabela:\\n`;Object.entries(result.data.records_deleted).forEach(([table,count])=>{message+=`-${table}:${count}registros\\n`})}alert(message);this.closeAllModals();if(window.expertzyCharts && typeof window.expertzyCharts.loadChartData==='function'){window.expertzyCharts.loadChartData()}}showExportSuccess(result){const recordsCount=result.meta.records_count || 0;const timestamp=new Date().toISOString().slice(0,19).replace(/[:-]/g,'');const filename=`database_export_${timestamp}.json`;const jsonString=JSON.stringify(result.data,null,2);const blob=new Blob([jsonString],{type:'application/json'});const url=URL.createObjectURL(blob);const link=document.createElement('a');link.href=url;link.download=filename;link.click();URL.revokeObjectURL(url);alert(`✅ Exportação concluída!\\n\\nArquivo:${filename}\\nRegistros exportados:${recordsCount}\\n\\nO download foi iniciado automaticamente.`);this.closeAllModals()}showError(message){alert(`❌ Erro:${message}`)}setProcessing(processing,message=''){this.isProcessing=processing;const processingElements=document.querySelectorAll('.processing-indicator');const executeButtons=document.querySelectorAll('#execute-cleanup,#execute-export');if(processing){processingElements.forEach(el=>{el.textContent=message;el.style.display='block'});executeButtons.forEach(btn=>{btn.disabled=true;btn.textContent='Processando...'})}else{processingElements.forEach(el=>{el.style.display='none'});executeButtons.forEach(btn=>{btn.disabled=false;if(btn.id==='execute-cleanup'){btn.textContent='Executar Limpeza'}else{btn.textContent='Executar Exportação'}})}}resetForms(){this.resetCleanupForm();this.resetExportForm()}resetCleanupForm(){document.querySelectorAll('[data-cleanup-type]').forEach(btn=>{btn.classList.remove('selected')});document.querySelectorAll('.cleanup-options').forEach(option=>{option.style.display='none'});const inputs=document.querySelectorAll('#cleanup-modal input[type="text"],#cleanup-modal input[type="number"]');inputs.forEach(input=>{input.value=''});const executeBtn=document.getElementById('execute-cleanup');if(executeBtn){executeBtn.disabled=true;executeBtn.removeAttribute('data-cleanup-type')}}resetExportForm(){document.querySelectorAll('[data-export-type]').forEach(btn=>{btn.classList.remove('selected')});document.querySelectorAll('.export-options').forEach(option=>{option.style.display='none'});const inputs=document.querySelectorAll('#export-modal input');inputs.forEach(input=>{if(input.type==='checkbox'){input.checked=input.id==='include-metadata' || input.id==='pretty-print'}else{input.value=''}});const select=document.getElementById('compression');if(select){select.value='none'}const executeBtn=document.getElementById('execute-export');if(executeBtn){executeBtn.disabled=true;executeBtn.removeAttribute('data-export-type')}}createCleanupModal(){console.log('Modal de limpeza será criado pelo componente PHP')}createExportModal(){console.log('Modal de exportação será criado pelo componente PHP')}}document.addEventListener('DOMContentLoaded',()=>{window.databaseManagement=new DatabaseManagement()});if(typeof module !=='undefined' && module.exports){module.exports=DatabaseManagement}
/* dashboard-integration.js */
class DashboardIntegration{constructor(){this.manualControl=null;this.expertzyCharts=null;this.isInitialized=false;this.init()}async init(){await this.waitForSystems();this.setupIntegrations();this.setupEventListeners();this.isInitialized=true;console.log('✅ DashboardIntegration inicializado')}async waitForSystems(){let attempts=0;while(!window.manualControlSystem && attempts < 50){await new Promise(resolve=> setTimeout(resolve,100));attempts++}if(window.manualControlSystem){this.manualControl=window.manualControlSystem;console.log('✅ Manual Control System conectado')}else{console.error('❌ Manual Control System não encontrado');return}attempts=0;while(!window.expertzyCharts && attempts < 30){await new Promise(resolve=> setTimeout(resolve,100));attempts++}if(window.expertzyCharts){this.expertzyCharts=window.expertzyCharts;console.log('✅ Expertzy Charts System conectado')}else{console.warn('⚠️ Expertzy Charts System não encontrado(opcional)')}}setupIntegrations(){if(!this.manualControl)return;this.integrateWithCharts();this.integrateWithDashboard();this.setupIntelligentAutoRefresh();this.setupConditionalValidations()}integrateWithCharts(){if(!this.expertzyCharts)return;const state=this.manualControl.getState();const feedback=this.manualControl.getFeedback();const originalLoadChartData=this.expertzyCharts.loadChartData;this.expertzyCharts.loadChartData=async function(manualTrigger=false){if(!manualTrigger && !state.canLoadCharts()){console.log('🚫 Carregamento automático bloqueado-dados insuficientes');this.showEmptyStates();return}if(manualTrigger && !state.canLoadCharts()){feedback.showToast('Não é possível carregar gráficos','warning',{subtitle:'Verifique se há dados suficientes no banco'});return}try{await originalLoadChartData.call(this,manualTrigger);state.updateChartsState({loaded:true,types:state.charts.available_types,last_load:new Date().toISOString()})}catch(error){console.error('Erro no carregamento dos gráficos:',error);feedback.showToast('Erro ao carregar gráficos','error')}};const originalRefreshChart=this.expertzyCharts.refreshChart;this.expertzyCharts.refreshChart=async function(chartType,manualTrigger=false){if(!manualTrigger){console.log(`🚫 Refresh automático de ${chartType}bloqueado`);return}return originalRefreshChart.call(this,chartType,manualTrigger)};window.loadChartsManually=()=>{if(this.expertzyCharts){return this.expertzyCharts.loadChartData(true)}else{feedback.showToast('Sistema de gráficos não disponível','error')}};console.log('✅ Integração com Charts System configurada')}integrateWithDashboard(){const state=this.manualControl.getState();const feedback=this.manualControl.getFeedback();if(typeof window.refreshAllCharts==='function'){const originalRefreshAll=window.refreshAllCharts;window.refreshAllCharts=function(){if(!state.canLoadCharts()){feedback.showToast('Sistema não pronto para refresh completo','warning',{subtitle:'Verifique status do banco de dados'});return}return window.manualControlSystem.forceRefresh()}}if(typeof window.loadStatsCards==='function'){const originalLoadStats=window.loadStatsCards;window.loadStatsCards=function(){if(!state.canLoadStats()){feedback.showToast('Dados insuficientes para estatísticas','warning');return}return originalLoadStats()}}console.log('✅ Integração com Dashboard configurada')}setupIntelligentAutoRefresh(){const autoRefresh=this.manualControl.getAutoRefresh();const state=this.manualControl.getState();autoRefresh.setCallbacks({onRefresh:async()=>{if(state.canLoadCharts()|| state.canLoadStats()){return this.manualControl.forceRefresh()}else{console.log('🔄 Auto-refresh pulado-sistema não pronto');return Promise.resolve()}},onStart:(interval)=>{console.log(`🔄 Auto-refresh inteligente iniciado(${interval/1000}s)`)},onError:(error)=>{console.error('Erro no auto-refresh:',error);if(error.message.includes('HTTP 5')){autoRefresh.stop();this.manualControl.getFeedback().showToast('Auto-refresh pausado devido a erro no servidor','warning',{persistent:true})}}});console.log('✅ Auto-refresh inteligente configurado')}setupConditionalValidations(){const state=this.manualControl.getState();state.on('database-changed',(newState,oldState)=>{this.updateUIBasedOnDatabaseChange(newState,oldState)});state.on('charts-loaded',(chartsState)=>{this.updateChartsUI(chartsState)});state.on('operation-started',(operationId)=>{this.updateOperationUI(operationId,'started')});state.on('operation-completed',(operationId,result)=>{this.updateOperationUI(operationId,'completed',result)});console.log('✅ Validações condicionais configuradas')}setupEventListeners(){document.addEventListener('chartsDataUpdated',(event)=>{console.log('📊 Dados de gráficos atualizados via evento',event.detail)});document.addEventListener('click',(event)=>{if(event.target.closest('.chart-control-btn[data-action="refresh"]')){const chartContainer=event.target.closest('[data-chart]');if(chartContainer){const chartType=chartContainer.dataset.chart;this.handleIndividualChartRefresh(chartType)}}});this.setupFiltersIntegration();console.log('✅ Event listeners configurados')}setupFiltersIntegration(){const filterElements={period:document.getElementById('periodFilter'),currency:document.getElementById('currencyFilter'),state:document.getElementById('stateFilter'),taxRegime:document.getElementById('taxRegimeFilter')};Object.entries(filterElements).forEach(([type,element])=>{if(element){element.addEventListener('change',()=>{if(this.manualControl.getState().charts.loaded){this.applyFiltersToCharts()}})}})}updateUIBasedOnDatabaseChange(newState,oldState){const indicators=document.querySelectorAll('[data-status-indicator]');indicators.forEach(indicator=>{const type=indicator.dataset.statusIndicator;switch(type){case 'database':indicator.className=`status-indicator ${newState.connected ? 'success':'error'}`;break;case 'data':indicator.className=`status-indicator ${newState.sufficient ? 'success':'warning'}`;break}});const disCounters=document.querySelectorAll('[data-counter="dis"]');disCounters.forEach(counter=>{counter.textContent=newState.dis_count.toLocaleString('pt-BR')});if(oldState.dis_count !==newState.dis_count){const change=newState.dis_count-oldState.dis_count;if(change > 0){this.manualControl.getFeedback().showToast(`${change}nova(s)DI(s)detectada(s)`,'info',{subtitle:`Total:${newState.dis_count}`})}}}updateChartsUI(chartsState){const chartContainers=document.querySelectorAll('[data-chart]');chartContainers.forEach(container=>{if(chartsState.loaded){container.setAttribute('data-state','loaded');const emptyState=container.querySelector('.chart-empty');if(emptyState){emptyState.style.display='none'}}});const filterControls=document.querySelector('.charts-filters');if(filterControls && chartsState.loaded){filterControls.classList.remove('disabled')}}updateOperationUI(operationId,status,result=null){const button=document.getElementById(operationId.replace('-',''));if(button){switch(status){case 'started':button.disabled=true;button.classList.add('loading');break;case 'completed':button.disabled=false;button.classList.remove('loading');if(result && !result.success){button.classList.add('error');setTimeout(()=>{button.classList.remove('error')},3000)}break}}}async handleIndividualChartRefresh(chartType){const state=this.manualControl.getState();if(!state.canLoadCharts()){this.manualControl.getFeedback().showToast(`Não é possível atualizar gráfico ${chartType}`,'warning',{subtitle:'Dados insuficientes'});return}try{if(this.expertzyCharts){await this.expertzyCharts.refreshChart(chartType,true);this.manualControl.getFeedback().showToast(`Gráfico ${chartType}atualizado`,'success')}}catch(error){console.error(`Erro ao atualizar gráfico ${chartType}:`,error);this.manualControl.getFeedback().showToast(`Erro ao atualizar gráfico ${chartType}`,'error')}}applyFiltersToCharts(){if(this.expertzyCharts && typeof this.expertzyCharts.applyFilters==='function'){const filters=this.getSelectedFilters();this.expertzyCharts.applyFilters(filters)}}getSelectedFilters(){const filters={};const periodActive=document.querySelector('#periodFilter .toggle-option.active');if(periodActive){filters.period=periodActive.dataset.period}const currencySelect=document.getElementById('currencyFilter');if(currencySelect){filters.currency=currencySelect.value}const stateSelect=document.getElementById('stateFilter');if(stateSelect){filters.state=stateSelect.value}const regimeActive=document.querySelector('#taxRegimeFilter .toggle-option.active');if(regimeActive){filters.taxRegime=regimeActive.dataset.regime}return filters}getManualControl(){return this.manualControl}getChartsSystem(){return this.expertzyCharts}isReady(){return this.isInitialized && this.manualControl !==null}async forceSystemRefresh(){if(this.manualControl){return this.manualControl.forceRefresh()}}getSystemStatus(){if(!this.manualControl)return null;const state=this.manualControl.getState();return{database:state.database,charts:state.charts,stats:state.stats,autoRefresh:state.autoRefresh,canLoadCharts:state.canLoadCharts(),canLoadStats:state.canLoadStats(),nextAction:state.getNextRecommendedAction()}}}let dashboardIntegration;function initDashboardIntegration(){if(window.dashboardIntegration){console.warn('DashboardIntegration já foi inicializado');return window.dashboardIntegration}dashboardIntegration=new DashboardIntegration();window.dashboardIntegration=dashboardIntegration;window.getSystemStatus=()=> dashboardIntegration.getSystemStatus();window.forceSystemRefresh=()=> dashboardIntegration.forceSystemRefresh();console.log('✅ DashboardIntegration inicializado e exposto globalmente');return dashboardIntegration}if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',()=>{setTimeout(initDashboardIntegration,100)})}else{setTimeout(initDashboardIntegration,100)}if(typeof module !=='undefined' && module.exports){module.exports=DashboardIntegration}
/* charts-extensions.js */
if(typeof ExpertzyChartsSystem !=='undefined'){ExpertzyChartsSystem.prototype.updateAllChartsWithPeriod=function(period){this.currentFilters=this.currentFilters ||{};this.currentFilters.period=period;document.querySelectorAll('[data-chart]').forEach(container=>{this.showChartSkeleton(container)});this.loadFilteredData()};ExpertzyChartsSystem.prototype.updateAllChartsWithCurrency=function(currency){this.currentFilters=this.currentFilters ||{};this.currentFilters.currency=currency;if(currency==='all'){this.loadChartData()}else{this.loadFilteredData()}};ExpertzyChartsSystem.prototype.updateAllChartsWithState=function(state){this.currentFilters=this.currentFilters ||{};this.currentFilters.state=state;this.loadFilteredData()};ExpertzyChartsSystem.prototype.updateAllChartsWithTaxRegime=function(regime){this.currentFilters=this.currentFilters ||{};this.currentFilters.taxRegime=regime;this.loadFilteredData()};ExpertzyChartsSystem.prototype.loadFilteredData=async function(){const filters=this.currentFilters ||{};const params=new URLSearchParams(filters);try{const response=await fetch(`/api/dashboard/charts/all?${params.toString()}`);const data=await response.json();if(data.success){this.renderAllCharts(data.charts)}}catch(error){console.error('Erro ao carregar dados filtrados:',error);this.showEmptyStates()}};ExpertzyChartsSystem.prototype.createMiniChart=function(canvasId,data,type='line'){const canvas=document.getElementById(canvasId);if(!canvas)return;const ctx=canvas.getContext('2d');const existingChart=Chart.getChart(ctx);if(existingChart){existingChart.destroy()}new Chart(ctx,{type:type,data:{labels:data.labels || [],datasets:[{data:data.values || [],borderColor:this.colors.primary,backgroundColor:'rgba(255,0,45,0.1)',borderWidth:2,pointRadius:0,pointHoverRadius:0,tension:0.4,fill:type==='line'}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{enabled:false}},scales:{x:{display:false},y:{display:false}},elements:{line:{borderWidth:2},point:{radius:0}},animation:{duration:1000,easing:'easeInOutQuart'}}})};ExpertzyChartsSystem.prototype.showTemporalDrillDown=function(month,data){const modal=this.createDrillDownModal({title:`Detalhes de ${month}`,content:this.generateTemporalDrillDownContent(month,data)});this.showModal(modal)};ExpertzyChartsSystem.prototype.showTaxDrillDown=function(taxType,data){const modal=this.createDrillDownModal({title:`Detalhes-${taxType.toUpperCase()}`,content:this.generateTaxDrillDownContent(taxType,data)});this.showModal(modal)};ExpertzyChartsSystem.prototype.showExpenseDrillDown=function(category,data){const modal=this.createDrillDownModal({title:`Despesas-${category}`,content:this.generateExpenseDrillDownContent(category,data)});this.showModal(modal)};ExpertzyChartsSystem.prototype.showStateDrillDown=function(state,data){const modal=this.createDrillDownModal({title:`Performance-${state}`,content:this.generateStateDrillDownContent(state,data)});this.showModal(modal)};ExpertzyChartsSystem.prototype.generateTemporalDrillDownContent=function(month,data){return ` <div class="drill-down-content"> <div class="drill-down-stats"> <div class="drill-stat-item"> <span class="drill-stat-label">DIs Processadas</span> <span class="drill-stat-value">${data.dis_count || 0}</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Valor CIF</span> <span class="drill-stat-value">R$ ${(data.cif_values || 0).toLocaleString('pt-BR')}M</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Crescimento</span> <span class="drill-stat-value ${data.growth > 0 ? 'positive':'negative'}">${data.growth || 0}%</span> </div> </div> <div class="drill-down-chart"> <canvas id="drillDownTemporalChart" width="400" height="200"></canvas> </div> <div class="drill-down-actions"> <button class="btn btn-primary" onclick="exportDrillDownData('${month}','temporal')">Exportar Dados</button> <button class="btn btn-secondary" onclick="viewDetailedReport('${month}','temporal')">Relatório Detalhado</button> </div> </div> `};ExpertzyChartsSystem.prototype.generateTaxDrillDownContent=function(taxType,data){const taxDetails={ii:{name:'Imposto de Importação',color:'#FF002D'},ipi:{name:'IPI',color:'#091A30'},pis:{name:'PIS',color:'#28a745'},cofins:{name:'COFINS',color:'#ffc107'},icms:{name:'ICMS',color:'#007bff'}};const tax=taxDetails[taxType] ||{name:taxType.toUpperCase(),color:'#6c757d'};return ` <div class="drill-down-content"> <div class="drill-down-header"> <div class="tax-indicator" style="background:${tax.color}"></div> <h4>${tax.name}</h4> </div> <div class="drill-down-stats"> <div class="drill-stat-item"> <span class="drill-stat-label">Valor Total</span> <span class="drill-stat-value">R$ ${data[`${taxType}_total`]?.toLocaleString('pt-BR')|| 0}M</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">% do Total</span> <span class="drill-stat-value">${data.percentages?.[0] || 0}%</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Operações</span> <span class="drill-stat-value">1,245</span> </div> </div> <div class="drill-down-breakdown"> <h5>Breakdown por Estado</h5> <div class="breakdown-list"> <div class="breakdown-item"> <span>SP</span> <div class="breakdown-bar"> <div class="breakdown-fill" style="width:45%;background:${tax.color}"></div> </div> <span>45%</span> </div> <div class="breakdown-item"> <span>RJ</span> <div class="breakdown-bar"> <div class="breakdown-fill" style="width:23%;background:${tax.color}"></div> </div> <span>23%</span> </div> <div class="breakdown-item"> <span>RS</span> <div class="breakdown-bar"> <div class="breakdown-fill" style="width:18%;background:${tax.color}"></div> </div> <span>18%</span> </div> </div> </div> </div> `};ExpertzyChartsSystem.prototype.generateExpenseDrillDownContent=function(category,data){return ` <div class="drill-down-content"> <div class="drill-down-stats"> <div class="drill-stat-item"> <span class="drill-stat-label">Valor Total</span> <span class="drill-stat-value">R$ ${data.values?.[0]?.toLocaleString('pt-BR')|| 0}</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Operações</span> <span class="drill-stat-value">234</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Valor Médio</span> <span class="drill-stat-value">R$ 1,287.50</span> </div> </div> <div class="drill-down-trend"> <h5>Evolução nos Últimos 6 Meses</h5> <canvas id="drillDownExpenseChart" width="400" height="150"></canvas> </div> <div class="drill-down-comparison"> <h5>Comparação com Outras Categorias</h5> <div class="comparison-grid"> <div class="comparison-item highlight"> <span class="category">${category}</span> <span class="value">R$ 125.8K</span> <span class="percentage">28.3%</span> </div> <div class="comparison-item"> <span class="category">THC</span> <span class="value">R$ 89.3K</span> <span class="percentage">20.1%</span> </div> <div class="comparison-item"> <span class="category">Armazenagem</span> <span class="value">R$ 67.2K</span> <span class="percentage">15.1%</span> </div> </div> </div> </div> `};ExpertzyChartsSystem.prototype.generateStateDrillDownContent=function(state,stateData){const stateDetails=stateData.states?.find(s=> s.uf===state);return ` <div class="drill-down-content"> <div class="drill-down-stats"> <div class="drill-stat-item"> <span class="drill-stat-label">DIs Processadas</span> <span class="drill-stat-value">${stateDetails?.dis_count || 0}</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Performance</span> <span class="drill-stat-value performance-${stateDetails?.performance > 75 ? 'high':stateDetails?.performance > 50 ? 'medium':'low'}">${stateDetails?.performance || 0}%</span> </div> <div class="drill-stat-item"> <span class="drill-stat-label">Benefícios Aplicados</span> <span class="drill-stat-value">${Math.round((stateDetails?.dis_count || 0)*(stateDetails?.performance || 0)/100)}</span> </div> </div> <div class="drill-down-benefits"> <h5>Tipos de Benefícios Fiscais</h5> <div class="benefits-list"> <div class="benefit-item"> <div class="benefit-icon">🌱</div> <div class="benefit-info"> <span class="benefit-name">Zona Franca</span> <span class="benefit-desc">Redução de 88% no II</span> </div> <span class="benefit-count">45 DIs</span> </div> <div class="benefit-item"> <div class="benefit-icon">🏭</div> <div class="benefit-info"> <span class="benefit-name">Ex-Tarifário</span> <span class="benefit-desc">Redução II para BK/BIT</span> </div> <span class="benefit-count">23 DIs</span> </div> <div class="benefit-item"> <div class="benefit-icon">🚢</div> <div class="benefit-info"> <span class="benefit-name">Acordos Comerciais</span> <span class="benefit-desc">MERCOSUL,Chile,Peru</span> </div> <span class="benefit-count">78 DIs</span> </div> </div> </div> </div> `};ExpertzyChartsSystem.prototype.createDrillDownModal=function(options){return{title:options.title,content:options.content,size:options.size || 'large',closable:options.closable !==false}};ExpertzyChartsSystem.prototype.showModal=function(modal){const modalHTML=` <div class="expertzy-modal-overlay" onclick="closeModal(event)"> <div class="expertzy-modal ${modal.size}" onclick="event.stopPropagation()"> <div class="expertzy-modal-header"> <h3>${modal.title}</h3> ${modal.closable ? '<button class="modal-close-btn" onclick="closeModal()">&times;</button>':''}</div> <div class="expertzy-modal-body"> ${modal.content}</div> </div> </div> `;const existingModal=document.querySelector('.expertzy-modal-overlay');if(existingModal){existingModal.remove()}document.body.insertAdjacentHTML('beforeend',modalHTML);setTimeout(()=>{const modalOverlay=document.querySelector('.expertzy-modal-overlay');if(modalOverlay){modalOverlay.classList.add('show')}},10);this.renderDrillDownCharts()};ExpertzyChartsSystem.prototype.renderDrillDownCharts=function(){setTimeout(()=>{const drillCharts=document.querySelectorAll('[id^="drillDown"][id$="Chart"]');drillCharts.forEach(canvas=>{if(canvas.id.includes('Temporal')){this.createDrillDownTemporalChart(canvas)}else if(canvas.id.includes('Expense')){this.createDrillDownExpenseChart(canvas)}})},100)};ExpertzyChartsSystem.prototype.createDrillDownTemporalChart=function(canvas){const ctx=canvas.getContext('2d');new Chart(ctx,{type:'line',data:{labels:['Jan','Fev','Mar','Abr','Mai','Jun'],datasets:[{label:'DIs por Dia',data:[12,19,8,15,22,18],borderColor:this.colors.primary,backgroundColor:'rgba(255,0,45,0.1)',borderWidth:2,tension:0.4,fill:true}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true,grid:{color:'rgba(0,0,0,0.05)'}},x:{grid:{display:false}}}}})};ExpertzyChartsSystem.prototype.createDrillDownExpenseChart=function(canvas){const ctx=canvas.getContext('2d');new Chart(ctx,{type:'bar',data:{labels:['Jul','Ago','Set','Out','Nov','Dez'],datasets:[{label:'Valor(R$ mil)',data:[145,132,158,142,139,151],backgroundColor:this.colors.warning,borderColor:this.colors.warning,borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true,grid:{color:'rgba(0,0,0,0.05)'}},x:{grid:{display:false}}}}})}}window.closeModal=function(event){if(!event || event.target.classList.contains('expertzy-modal-overlay')|| event.target.classList.contains('modal-close-btn')){const modalOverlay=document.querySelector('.expertzy-modal-overlay');if(modalOverlay){modalOverlay.classList.add('fade-out');setTimeout(()=>{modalOverlay.remove()},300)}}};window.exportDrillDownData=function(identifier,type){console.log(`Exportando dados de drill-down:${type}-${identifier}`)};window.viewDetailedReport=function(identifier,type){console.log(`Visualizando relatório detalhado:${type}-${identifier}`)};const dynamicStyles=` <style> .expertzy-modal-overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(9,26,48,0.8);backdrop-filter:blur(10px);z-index:10000;display:flex;align-items:center;justify-content:center;opacity:0;transition:opacity 0.3s ease}.expertzy-modal-overlay.show{opacity:1}.expertzy-modal-overlay.fade-out{opacity:0}.expertzy-modal{background:white;border-radius:20px;max-width:90vw;max-height:90vh;overflow:auto;box-shadow:0 20px 60px rgba(0,0,0,0.3);transform:scale(0.9);transition:transform 0.3s ease}.expertzy-modal-overlay.show .expertzy-modal{transform:scale(1)}.expertzy-modal.large{width:800px;min-height:600px}.expertzy-modal-header{display:flex;align-items:center;justify-content:space-between;padding:1.5rem 2rem;border-bottom:1px solid #e9ecef}.expertzy-modal-header h3{color:#343a40;font-weight:700;margin:0}.modal-close-btn{width:32px;height:32px;border:none;background:#f8f9fa;color:#6c757d;border-radius:8px;cursor:pointer;font-size:1.5rem;line-height:1;transition:all 0.3s ease}.modal-close-btn:hover{background:#FF002D;color:white}.expertzy-modal-body{padding:2rem}.drill-down-stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:1rem;margin-bottom:2rem}.drill-stat-item{text-align:center;padding:1rem;background:#f8f9fa;border-radius:12px;border:1px solid #e9ecef}.drill-stat-label{display:block;font-size:0.85rem;color:#6c757d;font-weight:600;text-transform:uppercase;letter-spacing:0.5px;margin-bottom:0.5rem}.drill-stat-value{display:block;font-size:1.5rem;font-weight:700;color:#FF002D}.drill-stat-value.positive{color:#28a745}.drill-stat-value.negative{color:#dc3545}.drill-down-chart{margin:2rem 0;height:200px}.drill-down-actions{display:flex;gap:1rem;justify-content:center;margin-top:2rem;padding-top:2rem;border-top:1px solid #e9ecef}.breakdown-list{display:flex;flex-direction:column;gap:0.8rem}.breakdown-item{display:flex;align-items:center;gap:1rem;padding:0.8rem;background:#f8f9fa;border-radius:8px}.breakdown-item span:first-child{min-width:30px;font-weight:600;color:#343a40}.breakdown-bar{flex:1;height:8px;background:#e9ecef;border-radius:4px;overflow:hidden}.breakdown-fill{height:100%;border-radius:4px;transition:width 0.8s ease}.benefits-list{display:flex;flex-direction:column;gap:1rem}.benefit-item{display:flex;align-items:center;gap:1rem;padding:1rem;background:#f8f9fa;border-radius:12px;border:1px solid #e9ecef;transition:all 0.3s ease}.benefit-item:hover{border-color:#FF002D;transform:translateX(5px)}.benefit-icon{font-size:1.5rem;width:40px;text-align:center}.benefit-info{flex:1}.benefit-name{display:block;font-weight:600;color:#343a40;margin-bottom:0.2rem}.benefit-desc{display:block;font-size:0.85rem;color:#6c757d}.benefit-count{font-weight:600;color:#FF002D;background:rgba(255,0,45,0.1);padding:0.3rem 0.8rem;border-radius:12px;font-size:0.85rem}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1rem}.comparison-item{display:flex;flex-direction:column;gap:0.5rem;padding:1rem;background:#f8f9fa;border-radius:12px;border:1px solid #e9ecef;text-align:center}.comparison-item.highlight{border-color:#FF002D;background:rgba(255,0,45,0.05)}.comparison-item .category{font-weight:600;color:#343a40}.comparison-item .value{font-size:1.2rem;font-weight:700;color:#FF002D}.comparison-item .percentage{font-size:0.9rem;color:#6c757d}.performance-high{color:#28a745 !important}.performance-medium{color:#ffc107 !important}.performance-low{color:#dc3545 !important}@media(max-width:768px){.expertzy-modal{width:95vw;margin:0 10px}.expertzy-modal-body{padding:1rem}.drill-down-stats{grid-template-columns:1fr}.drill-down-actions{flex-direction:column}}</style> `;document.head.insertAdjacentHTML('beforeend',dynamicStyles);console.log('✅ Extensões avançadas dos gráficos carregadas com sucesso');
